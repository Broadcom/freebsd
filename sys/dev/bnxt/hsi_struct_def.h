/*-
 * Broadcom NetXtreme-C/E network driver.
 *
 * Copyright (c) 2016 Broadcom, All Rights Reserved.
 * The term Broadcom refers to Broadcom Limited and/or its subsidiaries
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS'
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/cdefs.h>
__FBSDID("$FreeBSD$");

/****************************************************************************
 *
 * Note:  This file is scripted generated by hsi_decode.py.
 *      DO NOT modify this file manually !!!!
 *
 ****************************************************************************/
#ifndef _HSI_STRUCT_DEF_LINUX_EXTERNAL_H_
#define _HSI_STRUCT_DEF_LINUX_EXTERNAL_H_

/* per-context HW statistics -- chip view */
struct ctx_hw_stats  {
    uint64_t rx_ucast_pkts;
    uint64_t rx_mcast_pkts;
    uint64_t rx_bcast_pkts;
    uint64_t rx_discard_pkts;
    uint64_t rx_drop_pkts;
    uint64_t rx_ucast_bytes;
    uint64_t rx_mcast_bytes;
    uint64_t rx_bcast_bytes;
    uint64_t tx_ucast_pkts;
    uint64_t tx_mcast_pkts;
    uint64_t tx_bcast_pkts;
    uint64_t tx_discard_pkts;
    uint64_t tx_drop_pkts;
    uint64_t tx_ucast_bytes;
    uint64_t tx_mcast_bytes;
    uint64_t tx_bcast_bytes;
    uint64_t tpa_pkts;
    uint64_t tpa_bytes;
    uint64_t tpa_events;
    uint64_t tpa_aborts;
};

/* BD Ring Structures */
/* BD Base (8 bytes) */
struct bd_base {
	uint8_t type;
	#define BD_BASE_TYPE_MASK				    0x3fUL
	#define BD_BASE_TYPE_SFT				    0
	#define BD_BASE_TYPE_TX_BD_SHORT			   (0x0UL << 0)
	#define BD_BASE_TYPE_TX_BD_EMPTY			   (0x1UL << 0)
	#define BD_BASE_TYPE_RX_PROD_PKT			   (0x4UL << 0)
	#define BD_BASE_TYPE_RX_PROD_BFR			   (0x5UL << 0)
	#define BD_BASE_TYPE_RX_PROD_AGG			   (0x6UL << 0)
	#define BD_BASE_TYPE_TX_BD_LONG			   (0x10UL << 0)
	uint8_t unused_1[7];
};

/* Short TX BD (16 bytes) */
struct tx_bd_short {
	uint16_t flags_type;
	#define TX_BD_SHORT_TYPE_MASK				    0x3fUL
	#define TX_BD_SHORT_TYPE_SFT				    0
	#define TX_BD_SHORT_TYPE_TX_BD_SHORT			   (0x0UL << 0)
	#define TX_BD_SHORT_FLAGS_PACKET_END			    0x40UL
	#define TX_BD_SHORT_FLAGS_NO_CMPL			    0x80UL
	#define TX_BD_SHORT_FLAGS_BD_CNT_MASK			    0x1f00UL
	#define TX_BD_SHORT_FLAGS_BD_CNT_SFT			    8
	#define TX_BD_SHORT_FLAGS_LHINT_MASK			    0x6000UL
	#define TX_BD_SHORT_FLAGS_LHINT_SFT			    13
	#define TX_BD_SHORT_FLAGS_LHINT_LT512			   (0x0UL << 13)
	#define TX_BD_SHORT_FLAGS_LHINT_LT1K			   (0x1UL << 13)
	#define TX_BD_SHORT_FLAGS_LHINT_LT2K			   (0x2UL << 13)
	#define TX_BD_SHORT_FLAGS_LHINT_GTE2K			   (0x3UL << 13)
	#define TX_BD_SHORT_FLAGS_LHINT_LAST    TX_BD_SHORT_FLAGS_LHINT_GTE2K
	#define TX_BD_SHORT_FLAGS_COAL_NOW			    0x8000UL
	#define TX_BD_SHORT_FLAGS_MASK				    0xffc0UL
	#define TX_BD_SHORT_FLAGS_SFT				    6
	uint16_t len;
	uint32_t opaque;
	uint64_t address;
};

/* Long TX BD (32 bytes split to 2 16-byte struct) */
struct tx_bd_long {
	uint16_t flags_type;
	#define TX_BD_LONG_TYPE_MASK				    0x3fUL
	#define TX_BD_LONG_TYPE_SFT				    0
	#define TX_BD_LONG_TYPE_TX_BD_LONG			   (0x10UL << 0)
	#define TX_BD_LONG_FLAGS_PACKET_END			    0x40UL
	#define TX_BD_LONG_FLAGS_NO_CMPL			    0x80UL
	#define TX_BD_LONG_FLAGS_BD_CNT_MASK			    0x1f00UL
	#define TX_BD_LONG_FLAGS_BD_CNT_SFT			    8
	#define TX_BD_LONG_FLAGS_LHINT_MASK			    0x6000UL
	#define TX_BD_LONG_FLAGS_LHINT_SFT			    13
	#define TX_BD_LONG_FLAGS_LHINT_LT512			   (0x0UL << 13)
	#define TX_BD_LONG_FLAGS_LHINT_LT1K			   (0x1UL << 13)
	#define TX_BD_LONG_FLAGS_LHINT_LT2K			   (0x2UL << 13)
	#define TX_BD_LONG_FLAGS_LHINT_GTE2K			   (0x3UL << 13)
	#define TX_BD_LONG_FLAGS_LHINT_LAST    TX_BD_LONG_FLAGS_LHINT_GTE2K
	#define TX_BD_LONG_FLAGS_COAL_NOW			    0x8000UL
	#define TX_BD_LONG_FLAGS_MASK				    0xffc0UL
	#define TX_BD_LONG_FLAGS_SFT				    6
	uint16_t len;
	uint32_t opaque;
	uint64_t address;
};

/* last 16 bytes of Long TX BD */
struct tx_bd_long_hi {
	uint16_t lflags;
	#define TX_BD_LONG_LFLAGS_TCP_UDP_CHKSUM		    0x1UL
	#define TX_BD_LONG_LFLAGS_IP_CHKSUM			    0x2UL
	#define TX_BD_LONG_LFLAGS_NOCRC			    0x4UL
	#define TX_BD_LONG_LFLAGS_STAMP			    0x8UL
	#define TX_BD_LONG_LFLAGS_T_IP_CHKSUM			    0x10UL
	#define TX_BD_LONG_LFLAGS_LSO				    0x20UL
	#define TX_BD_LONG_LFLAGS_IPID_FMT			    0x40UL
	#define TX_BD_LONG_LFLAGS_T_IPID			    0x80UL
	#define TX_BD_LONG_LFLAGS_ROCE_CRC			    0x100UL
	#define TX_BD_LONG_LFLAGS_FCOE_CRC			    0x200UL
	uint16_t hdr_size;
	#define TX_BD_LONG_HDR_SIZE_MASK			    0x1ffUL
	#define TX_BD_LONG_HDR_SIZE_SFT			    0
	uint32_t mss;
	#define TX_BD_LONG_MSS_MASK				    0x7fffUL
	#define TX_BD_LONG_MSS_SFT				    0
	uint16_t unused_2;
	uint16_t cfa_action;
	uint32_t cfa_meta;
	#define TX_BD_LONG_CFA_META_VLAN_VID_MASK		    0xfffUL
	#define TX_BD_LONG_CFA_META_VLAN_VID_SFT		    0
	#define TX_BD_LONG_CFA_META_VLAN_DE			    0x1000UL
	#define TX_BD_LONG_CFA_META_VLAN_PRI_MASK		    0xe000UL
	#define TX_BD_LONG_CFA_META_VLAN_PRI_SFT		    13
	#define TX_BD_LONG_CFA_META_VLAN_TPID_MASK		    0x70000UL
	#define TX_BD_LONG_CFA_META_VLAN_TPID_SFT		    16
	#define TX_BD_LONG_CFA_META_VLAN_TPID_TPID88A8		   (0x0UL << 16)
	#define TX_BD_LONG_CFA_META_VLAN_TPID_TPID8100		   (0x1UL << 16)
	#define TX_BD_LONG_CFA_META_VLAN_TPID_TPID9100		   (0x2UL << 16)
	#define TX_BD_LONG_CFA_META_VLAN_TPID_TPID9200		   (0x3UL << 16)
	#define TX_BD_LONG_CFA_META_VLAN_TPID_TPID9300		   (0x4UL << 16)
	#define TX_BD_LONG_CFA_META_VLAN_TPID_TPIDCFG		   (0x5UL << 16)
	#define TX_BD_LONG_CFA_META_VLAN_TPID_LAST    TX_BD_LONG_CFA_META_VLAN_TPID_TPIDCFG
	#define TX_BD_LONG_CFA_META_VLAN_RESERVED_MASK		    0xff80000UL
	#define TX_BD_LONG_CFA_META_VLAN_RESERVED_SFT		    19
	#define TX_BD_LONG_CFA_META_KEY_MASK			    0xf0000000UL
	#define TX_BD_LONG_CFA_META_KEY_SFT			    28
	#define TX_BD_LONG_CFA_META_KEY_NONE			   (0x0UL << 28)
	#define TX_BD_LONG_CFA_META_KEY_VLAN_TAG		   (0x1UL << 28)
	#define TX_BD_LONG_CFA_META_KEY_LAST    TX_BD_LONG_CFA_META_KEY_VLAN_TAG
};

/* Empty TX BD (16 bytes) */
struct tx_bd_empty {
	uint8_t type;
	#define TX_BD_EMPTY_TYPE_MASK				    0x3fUL
	#define TX_BD_EMPTY_TYPE_SFT				    0
	#define TX_BD_EMPTY_TYPE_TX_BD_EMPTY			   (0x1UL << 0)
	uint8_t unused_1[3];
	uint8_t unused_2;
	uint8_t unused_3[3];
	uint64_t unused_4;
};

/* RX Producer Packet BD (16 bytes) */
struct rx_prod_pkt_bd {
	uint16_t flags_type;
	#define RX_PROD_PKT_BD_TYPE_MASK			    0x3fUL
	#define RX_PROD_PKT_BD_TYPE_SFT			    0
	#define RX_PROD_PKT_BD_TYPE_RX_PROD_PKT		   (0x4UL << 0)
	#define RX_PROD_PKT_BD_FLAGS_SOP_PAD			    0x40UL
	#define RX_PROD_PKT_BD_FLAGS_EOP_PAD			    0x80UL
	#define RX_PROD_PKT_BD_FLAGS_BUFFERS_MASK		    0x300UL
	#define RX_PROD_PKT_BD_FLAGS_BUFFERS_SFT		    8
	#define RX_PROD_PKT_BD_FLAGS_MASK			    0xffc0UL
	#define RX_PROD_PKT_BD_FLAGS_SFT			    6
	uint16_t len;
	uint32_t opaque;
	uint64_t address;
};

/* RX Producer Buffer BD (16 bytes) */
struct rx_prod_bfr_bd {
	uint16_t flags_type;
	#define RX_PROD_BFR_BD_TYPE_MASK			    0x3fUL
	#define RX_PROD_BFR_BD_TYPE_SFT			    0
	#define RX_PROD_BFR_BD_TYPE_RX_PROD_BFR		   (0x5UL << 0)
	#define RX_PROD_BFR_BD_FLAGS_MASK			    0xffc0UL
	#define RX_PROD_BFR_BD_FLAGS_SFT			    6
	uint16_t len;
	uint32_t opaque;
	uint64_t address;
};

/* RX Producer Aggregation BD (16 bytes) */
struct rx_prod_agg_bd {
	uint16_t flags_type;
	#define RX_PROD_AGG_BD_TYPE_MASK			    0x3fUL
	#define RX_PROD_AGG_BD_TYPE_SFT			    0
	#define RX_PROD_AGG_BD_TYPE_RX_PROD_AGG		   (0x6UL << 0)
	#define RX_PROD_AGG_BD_FLAGS_EOP_PAD			    0x40UL
	#define RX_PROD_AGG_BD_FLAGS_MASK			    0xffc0UL
	#define RX_PROD_AGG_BD_FLAGS_SFT			    6
	uint16_t len;
	uint32_t opaque;
	uint64_t address;
};

/* Completion Ring Structures */
/* Base Completion Record (16 bytes) */
struct cmpl_base {
	uint16_t type;
	#define CMPL_BASE_TYPE_MASK				    0x3fUL
	#define CMPL_BASE_TYPE_SFT				    0
	#define CMPL_BASE_TYPE_TX_L2				   (0x0UL << 0)
	#define CMPL_BASE_TYPE_RX_L2				   (0x11UL << 0)
	#define CMPL_BASE_TYPE_RX_AGG				   (0x12UL << 0)
	#define CMPL_BASE_TYPE_RX_TPA_START			   (0x13UL << 0)
	#define CMPL_BASE_TYPE_RX_TPA_END			   (0x15UL << 0)
	#define CMPL_BASE_TYPE_STAT_EJECT			   (0x1aUL << 0)
	#define CMPL_BASE_TYPE_HWRM_DONE			   (0x20UL << 0)
	#define CMPL_BASE_TYPE_HWRM_FWD_REQ			   (0x22UL << 0)
	#define CMPL_BASE_TYPE_HWRM_FWD_RESP			   (0x24UL << 0)
	#define CMPL_BASE_TYPE_HWRM_ASYNC_EVENT		   (0x2eUL << 0)
	#define CMPL_BASE_TYPE_CQ_NOTIFICATION			   (0x30UL << 0)
	#define CMPL_BASE_TYPE_SRQ_EVENT			   (0x32UL << 0)
	#define CMPL_BASE_TYPE_DBQ_EVENT			   (0x34UL << 0)
	#define CMPL_BASE_TYPE_QP_EVENT			   (0x38UL << 0)
	#define CMPL_BASE_TYPE_FUNC_EVENT			   (0x3aUL << 0)
	uint16_t info1;
	uint32_t info2;
	uint32_t info3_v;
	#define CMPL_BASE_V					    0x1UL
	#define CMPL_BASE_INFO3_MASK				    0xfffffffeUL
	#define CMPL_BASE_INFO3_SFT				    1
	uint32_t info4;
};

/* TX Completion Record (16 bytes) */
struct tx_cmpl {
	uint16_t flags_type;
	#define TX_CMPL_TYPE_MASK				    0x3fUL
	#define TX_CMPL_TYPE_SFT				    0
	#define TX_CMPL_TYPE_TX_L2				   (0x0UL << 0)
	#define TX_CMPL_FLAGS_ERROR				    0x40UL
	#define TX_CMPL_FLAGS_PUSH				    0x80UL
	#define TX_CMPL_FLAGS_MASK				    0xffc0UL
	#define TX_CMPL_FLAGS_SFT				    6
	uint16_t unused_0;
	uint32_t opaque;
	uint16_t errors_v;
	#define TX_CMPL_V					    0x1UL
	#define TX_CMPL_ERRORS_BUFFER_ERROR_MASK		    0xeUL
	#define TX_CMPL_ERRORS_BUFFER_ERROR_SFT		    1
	#define TX_CMPL_ERRORS_BUFFER_ERROR_NO_ERROR		   (0x0UL << 1)
	#define TX_CMPL_ERRORS_BUFFER_ERROR_BAD_FMT		   (0x2UL << 1)
	#define TX_CMPL_ERRORS_BUFFER_ERROR_LAST    TX_CMPL_ERRORS_BUFFER_ERROR_BAD_FMT
	#define TX_CMPL_ERRORS_ZERO_LENGTH_PKT			    0x10UL
	#define TX_CMPL_ERRORS_EXCESSIVE_BD_LENGTH		    0x20UL
	#define TX_CMPL_ERRORS_DMA_ERROR			    0x40UL
	#define TX_CMPL_ERRORS_HINT_TOO_SHORT			    0x80UL
	#define TX_CMPL_ERRORS_POISON_TLP_ERROR		    0x100UL
	#define TX_CMPL_ERRORS_MASK				    0xfffeUL
	#define TX_CMPL_ERRORS_SFT				    1
	uint16_t unused_1;
	uint32_t unused_2;
};

/* RX Packet Completion Record (32 bytes split to 2 16-byte struct) */
struct rx_pkt_cmpl {
	uint16_t flags_type;
	#define RX_PKT_CMPL_TYPE_MASK				    0x3fUL
	#define RX_PKT_CMPL_TYPE_SFT				    0
	#define RX_PKT_CMPL_TYPE_RX_L2				   (0x11UL << 0)
	#define RX_PKT_CMPL_FLAGS_ERROR			    0x40UL
	#define RX_PKT_CMPL_FLAGS_PLACEMENT_MASK		    0x380UL
	#define RX_PKT_CMPL_FLAGS_PLACEMENT_SFT		    7
	#define RX_PKT_CMPL_FLAGS_PLACEMENT_NORMAL		   (0x0UL << 7)
	#define RX_PKT_CMPL_FLAGS_PLACEMENT_JUMBO		   (0x1UL << 7)
	#define RX_PKT_CMPL_FLAGS_PLACEMENT_HDS		   (0x2UL << 7)
	#define RX_PKT_CMPL_FLAGS_PLACEMENT_LAST    RX_PKT_CMPL_FLAGS_PLACEMENT_HDS
	#define RX_PKT_CMPL_FLAGS_RSS_VALID			    0x400UL
	#define RX_PKT_CMPL_FLAGS_ITYPE_MASK			    0xf000UL
	#define RX_PKT_CMPL_FLAGS_ITYPE_SFT			    12
	#define RX_PKT_CMPL_FLAGS_ITYPE_NOT_KNOWN		   (0x0UL << 12)
	#define RX_PKT_CMPL_FLAGS_ITYPE_IP			   (0x1UL << 12)
	#define RX_PKT_CMPL_FLAGS_ITYPE_TCP			   (0x2UL << 12)
	#define RX_PKT_CMPL_FLAGS_ITYPE_UDP			   (0x3UL << 12)
	#define RX_PKT_CMPL_FLAGS_ITYPE_FCOE			   (0x4UL << 12)
	#define RX_PKT_CMPL_FLAGS_ITYPE_ROCE			   (0x5UL << 12)
	#define RX_PKT_CMPL_FLAGS_ITYPE_ICMP			   (0x7UL << 12)
	#define RX_PKT_CMPL_FLAGS_ITYPE_PTP_WO_TIMESTAMP	   (0x8UL << 12)
	#define RX_PKT_CMPL_FLAGS_ITYPE_PTP_W_TIMESTAMP	   (0x9UL << 12)
	#define RX_PKT_CMPL_FLAGS_ITYPE_LAST    RX_PKT_CMPL_FLAGS_ITYPE_PTP_W_TIMESTAMP
	#define RX_PKT_CMPL_FLAGS_MASK				    0xffc0UL
	#define RX_PKT_CMPL_FLAGS_SFT				    6
	uint16_t len;
	uint32_t opaque;
	uint8_t agg_bufs_v1;
	#define RX_PKT_CMPL_V1					    0x1UL
	#define RX_PKT_CMPL_AGG_BUFS_MASK			    0x3eUL
	#define RX_PKT_CMPL_AGG_BUFS_SFT			    1
	uint8_t rss_hash_type;
	uint8_t payload_offset;
	uint8_t unused_1;
	uint32_t rss_hash;
};

/* last 16 bytes of RX Packet Completion Record */
struct rx_pkt_cmpl_hi {
	uint32_t flags2;
	#define RX_PKT_CMPL_FLAGS2_IP_CS_CALC			    0x1UL
	#define RX_PKT_CMPL_FLAGS2_L4_CS_CALC			    0x2UL
	#define RX_PKT_CMPL_FLAGS2_T_IP_CS_CALC		    0x4UL
	#define RX_PKT_CMPL_FLAGS2_T_L4_CS_CALC		    0x8UL
	#define RX_PKT_CMPL_FLAGS2_META_FORMAT_MASK		    0xf0UL
	#define RX_PKT_CMPL_FLAGS2_META_FORMAT_SFT		    4
	#define RX_PKT_CMPL_FLAGS2_META_FORMAT_NONE		   (0x0UL << 4)
	#define RX_PKT_CMPL_FLAGS2_META_FORMAT_VLAN		   (0x1UL << 4)
	#define RX_PKT_CMPL_FLAGS2_META_FORMAT_LAST    RX_PKT_CMPL_FLAGS2_META_FORMAT_VLAN
	#define RX_PKT_CMPL_FLAGS2_IP_TYPE			    0x100UL
	uint32_t metadata;
	#define RX_PKT_CMPL_METADATA_VID_MASK			    0xfffUL
	#define RX_PKT_CMPL_METADATA_VID_SFT			    0
	#define RX_PKT_CMPL_METADATA_DE			    0x1000UL
	#define RX_PKT_CMPL_METADATA_PRI_MASK			    0xe000UL
	#define RX_PKT_CMPL_METADATA_PRI_SFT			    13
	#define RX_PKT_CMPL_METADATA_TPID_MASK			    0xffff0000UL
	#define RX_PKT_CMPL_METADATA_TPID_SFT			    16
	uint16_t errors_v2;
	#define RX_PKT_CMPL_V2					    0x1UL
	#define RX_PKT_CMPL_ERRORS_BUFFER_ERROR_MASK		    0xeUL
	#define RX_PKT_CMPL_ERRORS_BUFFER_ERROR_SFT		    1
	#define RX_PKT_CMPL_ERRORS_BUFFER_ERROR_NO_BUFFER	   (0x0UL << 1)
	#define RX_PKT_CMPL_ERRORS_BUFFER_ERROR_DID_NOT_FIT       (0x1UL << 1)
	#define RX_PKT_CMPL_ERRORS_BUFFER_ERROR_NOT_ON_CHIP       (0x2UL << 1)
	#define RX_PKT_CMPL_ERRORS_BUFFER_ERROR_BAD_FORMAT	   (0x3UL << 1)
	#define RX_PKT_CMPL_ERRORS_BUFFER_ERROR_LAST    RX_PKT_CMPL_ERRORS_BUFFER_ERROR_BAD_FORMAT
	#define RX_PKT_CMPL_ERRORS_IP_CS_ERROR			    0x10UL
	#define RX_PKT_CMPL_ERRORS_L4_CS_ERROR			    0x20UL
	#define RX_PKT_CMPL_ERRORS_T_IP_CS_ERROR		    0x40UL
	#define RX_PKT_CMPL_ERRORS_T_L4_CS_ERROR		    0x80UL
	#define RX_PKT_CMPL_ERRORS_CRC_ERROR			    0x100UL
	#define RX_PKT_CMPL_ERRORS_T_PKT_ERROR_MASK		    0xe00UL
	#define RX_PKT_CMPL_ERRORS_T_PKT_ERROR_SFT		    9
	#define RX_PKT_CMPL_ERRORS_T_PKT_ERROR_NO_ERROR	   (0x0UL << 9)
	#define RX_PKT_CMPL_ERRORS_T_PKT_ERROR_T_L3_BAD_VERSION   (0x1UL << 9)
	#define RX_PKT_CMPL_ERRORS_T_PKT_ERROR_T_L3_BAD_HDR_LEN   (0x2UL << 9)
	#define RX_PKT_CMPL_ERRORS_T_PKT_ERROR_TUNNEL_TOTAL_ERROR (0x3UL << 9)
	#define RX_PKT_CMPL_ERRORS_T_PKT_ERROR_T_IP_TOTAL_ERROR   (0x4UL << 9)
	#define RX_PKT_CMPL_ERRORS_T_PKT_ERROR_T_UDP_TOTAL_ERROR  (0x5UL << 9)
	#define RX_PKT_CMPL_ERRORS_T_PKT_ERROR_T_L3_BAD_TTL       (0x6UL << 9)
	#define RX_PKT_CMPL_ERRORS_T_PKT_ERROR_LAST    RX_PKT_CMPL_ERRORS_T_PKT_ERROR_T_L3_BAD_TTL
	#define RX_PKT_CMPL_ERRORS_PKT_ERROR_MASK		    0xf000UL
	#define RX_PKT_CMPL_ERRORS_PKT_ERROR_SFT		    12
	#define RX_PKT_CMPL_ERRORS_PKT_ERROR_NO_ERROR		   (0x0UL << 12)
	#define RX_PKT_CMPL_ERRORS_PKT_ERROR_L3_BAD_VERSION       (0x1UL << 12)
	#define RX_PKT_CMPL_ERRORS_PKT_ERROR_L3_BAD_HDR_LEN       (0x2UL << 12)
	#define RX_PKT_CMPL_ERRORS_PKT_ERROR_L3_BAD_TTL	   (0x3UL << 12)
	#define RX_PKT_CMPL_ERRORS_PKT_ERROR_IP_TOTAL_ERROR       (0x4UL << 12)
	#define RX_PKT_CMPL_ERRORS_PKT_ERROR_UDP_TOTAL_ERROR      (0x5UL << 12)
	#define RX_PKT_CMPL_ERRORS_PKT_ERROR_L4_BAD_HDR_LEN       (0x6UL << 12)
	#define RX_PKT_CMPL_ERRORS_PKT_ERROR_L4_BAD_HDR_LEN_TOO_SMALL (0x7UL << 12)
	#define RX_PKT_CMPL_ERRORS_PKT_ERROR_L4_BAD_OPT_LEN       (0x8UL << 12)
	#define RX_PKT_CMPL_ERRORS_PKT_ERROR_LAST    RX_PKT_CMPL_ERRORS_PKT_ERROR_L4_BAD_OPT_LEN
	#define RX_PKT_CMPL_ERRORS_MASK			    0xfffeUL
	#define RX_PKT_CMPL_ERRORS_SFT				    1
	uint16_t cfa_code;
	uint32_t reorder;
	#define RX_PKT_CMPL_REORDER_MASK			    0xffffffUL
	#define RX_PKT_CMPL_REORDER_SFT			    0
};

/* RX L2 TPA Start Completion Record (32 bytes split to 2 16-byte struct) */
struct rx_tpa_start_cmpl {
	uint16_t flags_type;
	#define RX_TPA_START_CMPL_TYPE_MASK			    0x3fUL
	#define RX_TPA_START_CMPL_TYPE_SFT			    0
	#define RX_TPA_START_CMPL_TYPE_RX_TPA_START		   (0x13UL << 0)
	#define RX_TPA_START_CMPL_FLAGS_ERROR			    0x40UL
	#define RX_TPA_START_CMPL_FLAGS_PLACEMENT_MASK		    0x380UL
	#define RX_TPA_START_CMPL_FLAGS_PLACEMENT_SFT		    7
	#define RX_TPA_START_CMPL_FLAGS_PLACEMENT_JUMBO	   (0x1UL << 7)
	#define RX_TPA_START_CMPL_FLAGS_PLACEMENT_HDS		   (0x2UL << 7)
	#define RX_TPA_START_CMPL_FLAGS_PLACEMENT_GRO_JUMBO       (0x5UL << 7)
	#define RX_TPA_START_CMPL_FLAGS_PLACEMENT_GRO_HDS	   (0x6UL << 7)
	#define RX_TPA_START_CMPL_FLAGS_PLACEMENT_LAST    RX_TPA_START_CMPL_FLAGS_PLACEMENT_GRO_HDS
	#define RX_TPA_START_CMPL_FLAGS_RSS_VALID		    0x400UL
	#define RX_TPA_START_CMPL_FLAGS_ITYPE_MASK		    0xf000UL
	#define RX_TPA_START_CMPL_FLAGS_ITYPE_SFT		    12
	#define RX_TPA_START_CMPL_FLAGS_ITYPE_TCP		   (0x2UL << 12)
	#define RX_TPA_START_CMPL_FLAGS_ITYPE_LAST    RX_TPA_START_CMPL_FLAGS_ITYPE_TCP
	#define RX_TPA_START_CMPL_FLAGS_MASK			    0xffc0UL
	#define RX_TPA_START_CMPL_FLAGS_SFT			    6
	uint16_t len;
	uint32_t opaque;
	uint8_t v1;
	#define RX_TPA_START_CMPL_V1				    0x1UL
	uint8_t rss_hash_type;
	uint16_t agg_id;
	#define RX_TPA_START_CMPL_AGG_ID_MASK			    0xfe00UL
	#define RX_TPA_START_CMPL_AGG_ID_SFT			    9
	uint32_t rss_hash;
};

/* last 16 bytes of RX L2 TPA Start Completion Record */
struct rx_tpa_start_cmpl_hi {
	uint32_t flags2;
	#define RX_TPA_START_CMPL_FLAGS2_IP_CS_CALC		    0x1UL
	#define RX_TPA_START_CMPL_FLAGS2_L4_CS_CALC		    0x2UL
	#define RX_TPA_START_CMPL_FLAGS2_T_IP_CS_CALC		    0x4UL
	#define RX_TPA_START_CMPL_FLAGS2_T_L4_CS_CALC		    0x8UL
	#define RX_TPA_START_CMPL_FLAGS2_META_FORMAT_MASK	    0xf0UL
	#define RX_TPA_START_CMPL_FLAGS2_META_FORMAT_SFT	    4
	#define RX_TPA_START_CMPL_FLAGS2_META_FORMAT_NONE	   (0x0UL << 4)
	#define RX_TPA_START_CMPL_FLAGS2_META_FORMAT_VLAN	   (0x1UL << 4)
	#define RX_TPA_START_CMPL_FLAGS2_META_FORMAT_LAST    RX_TPA_START_CMPL_FLAGS2_META_FORMAT_VLAN
	#define RX_TPA_START_CMPL_FLAGS2_IP_TYPE		    0x100UL
	uint32_t metadata;
	#define RX_TPA_START_CMPL_METADATA_VID_MASK		    0xfffUL
	#define RX_TPA_START_CMPL_METADATA_VID_SFT		    0
	#define RX_TPA_START_CMPL_METADATA_DE			    0x1000UL
	#define RX_TPA_START_CMPL_METADATA_PRI_MASK		    0xe000UL
	#define RX_TPA_START_CMPL_METADATA_PRI_SFT		    13
	#define RX_TPA_START_CMPL_METADATA_TPID_MASK		    0xffff0000UL
	#define RX_TPA_START_CMPL_METADATA_TPID_SFT		    16
	uint16_t v2;
	#define RX_TPA_START_CMPL_V2				    0x1UL
	uint16_t cfa_code;
	uint32_t inner_l4_size_inner_l3_offset_inner_l2_offset_outer_l3_offset;
	#define RX_TPA_START_CMPL_OUTER_L3_OFFSET_MASK		    0x1ffUL
	#define RX_TPA_START_CMPL_OUTER_L3_OFFSET_SFT		    0
	#define RX_TPA_START_CMPL_INNER_L2_OFFSET_MASK		    0x3fe00UL
	#define RX_TPA_START_CMPL_INNER_L2_OFFSET_SFT		    9
	#define RX_TPA_START_CMPL_INNER_L3_OFFSET_MASK		    0x7fc0000UL
	#define RX_TPA_START_CMPL_INNER_L3_OFFSET_SFT		    18
	#define RX_TPA_START_CMPL_INNER_L4_SIZE_MASK		    0xf8000000UL
	#define RX_TPA_START_CMPL_INNER_L4_SIZE_SFT		    27
};

/* RX TPA End Completion Record (32 bytes split to 2 16-byte struct) */
struct rx_tpa_end_cmpl {
	uint16_t flags_type;
	#define RX_TPA_END_CMPL_TYPE_MASK			    0x3fUL
	#define RX_TPA_END_CMPL_TYPE_SFT			    0
	#define RX_TPA_END_CMPL_TYPE_RX_TPA_END		   (0x15UL << 0)
	#define RX_TPA_END_CMPL_FLAGS_ERROR			    0x40UL
	#define RX_TPA_END_CMPL_FLAGS_PLACEMENT_MASK		    0x380UL
	#define RX_TPA_END_CMPL_FLAGS_PLACEMENT_SFT		    7
	#define RX_TPA_END_CMPL_FLAGS_PLACEMENT_JUMBO		   (0x1UL << 7)
	#define RX_TPA_END_CMPL_FLAGS_PLACEMENT_HDS		   (0x2UL << 7)
	#define RX_TPA_END_CMPL_FLAGS_PLACEMENT_GRO_JUMBO	   (0x5UL << 7)
	#define RX_TPA_END_CMPL_FLAGS_PLACEMENT_GRO_HDS	   (0x6UL << 7)
	#define RX_TPA_END_CMPL_FLAGS_PLACEMENT_LAST    RX_TPA_END_CMPL_FLAGS_PLACEMENT_GRO_HDS
	#define RX_TPA_END_CMPL_FLAGS_ITYPE_MASK		    0xf000UL
	#define RX_TPA_END_CMPL_FLAGS_ITYPE_SFT		    12
	#define RX_TPA_END_CMPL_FLAGS_MASK			    0xffc0UL
	#define RX_TPA_END_CMPL_FLAGS_SFT			    6
	uint16_t len;
	uint32_t opaque;
	uint8_t agg_bufs_v1;
	#define RX_TPA_END_CMPL_V1				    0x1UL
	#define RX_TPA_END_CMPL_AGG_BUFS_MASK			    0x7eUL
	#define RX_TPA_END_CMPL_AGG_BUFS_SFT			    1
	uint8_t tpa_segs;
	uint8_t payload_offset;
	uint8_t agg_id;
	#define RX_TPA_END_CMPL_AGG_ID_MASK			    0xfeUL
	#define RX_TPA_END_CMPL_AGG_ID_SFT			    1
	uint32_t tsdelta;
};

/* last 16 bytes of RX TPA End Completion Record */
struct rx_tpa_end_cmpl_hi {
	uint32_t tpa_dup_acks;
	#define RX_TPA_END_CMPL_TPA_DUP_ACKS_MASK		    0xfUL
	#define RX_TPA_END_CMPL_TPA_DUP_ACKS_SFT		    0
	uint16_t tpa_seg_len;
	uint16_t unused_3;
	uint16_t errors_v2;
	#define RX_TPA_END_CMPL_V2				    0x1UL
	#define RX_TPA_END_CMPL_ERRORS_BUFFER_ERROR_MASK	    0xeUL
	#define RX_TPA_END_CMPL_ERRORS_BUFFER_ERROR_SFT	    1
	#define RX_TPA_END_CMPL_ERRORS_BUFFER_ERROR_NOT_ON_CHIP   (0x2UL << 1)
	#define RX_TPA_END_CMPL_ERRORS_BUFFER_ERROR_RSV_ERROR     (0x4UL << 1)
	#define RX_TPA_END_CMPL_ERRORS_BUFFER_ERROR_LAST    RX_TPA_END_CMPL_ERRORS_BUFFER_ERROR_RSV_ERROR
	#define RX_TPA_END_CMPL_ERRORS_MASK			    0xfffeUL
	#define RX_TPA_END_CMPL_ERRORS_SFT			    1
	uint16_t unused_4;
	uint32_t start_opaque;
};

/* RX Aggregation Buffer Completion Record (16 bytes) */
struct rx_abuf_cmpl {
	uint16_t type;
	#define RX_ABUF_CMPL_TYPE_MASK				    0x3fUL
	#define RX_ABUF_CMPL_TYPE_SFT				    0
	#define RX_ABUF_CMPL_TYPE_RX_AGG			   (0x12UL << 0)
	uint16_t len;
	uint32_t opaque;
	uint32_t v;
	#define RX_ABUF_CMPL_V					    0x1UL
	uint32_t unused_2;
};

/* Statistics Ejection Buffer Completion Record (16 bytes) */
struct eject_cmpl {
	uint16_t type;
	#define EJECT_CMPL_TYPE_MASK				    0x3fUL
	#define EJECT_CMPL_TYPE_SFT				    0
	#define EJECT_CMPL_TYPE_STAT_EJECT			   (0x1aUL << 0)
	uint16_t len;
	uint32_t opaque;
	uint32_t v;
	#define EJECT_CMPL_V					    0x1UL
	uint32_t unused_2;
};

/* HWRM Completion Record (16 bytes) */
struct hwrm_cmpl {
	uint16_t type;
	#define HWRM_CMPL_TYPE_MASK				    0x3fUL
	#define HWRM_CMPL_TYPE_SFT				    0
	#define HWRM_CMPL_TYPE_HWRM_DONE			   (0x20UL << 0)
	uint16_t sequence_id;
	uint32_t unused_1;
	uint32_t v;
	#define HWRM_CMPL_V					    0x1UL
	uint32_t unused_3;
};

/* HWRM Forwarded Request (16 bytes) */
struct hwrm_fwd_req_cmpl {
	uint16_t req_len_type;
	#define HWRM_FWD_REQ_CMPL_TYPE_MASK			    0x3fUL
	#define HWRM_FWD_REQ_CMPL_TYPE_SFT			    0
	#define HWRM_FWD_REQ_CMPL_TYPE_HWRM_FWD_REQ		   (0x22UL << 0)
	#define HWRM_FWD_REQ_CMPL_REQ_LEN_MASK			    0xffc0UL
	#define HWRM_FWD_REQ_CMPL_REQ_LEN_SFT			    6
	uint16_t source_id;
	uint32_t unused_0;
	uint32_t req_buf_addr_v[2];
	#define HWRM_FWD_REQ_CMPL_V				    0x1UL
	#define HWRM_FWD_REQ_CMPL_REQ_BUF_ADDR_MASK		    0xfffffffeUL
	#define HWRM_FWD_REQ_CMPL_REQ_BUF_ADDR_SFT		    1
};

/* HWRM Forwarded Response (16 bytes) */
struct hwrm_fwd_resp_cmpl {
	uint16_t type;
	#define HWRM_FWD_RESP_CMPL_TYPE_MASK			    0x3fUL
	#define HWRM_FWD_RESP_CMPL_TYPE_SFT			    0
	#define HWRM_FWD_RESP_CMPL_TYPE_HWRM_FWD_RESP		   (0x24UL << 0)
	uint16_t source_id;
	uint16_t resp_len;
	uint16_t unused_1;
	uint32_t resp_buf_addr_v[2];
	#define HWRM_FWD_RESP_CMPL_V				    0x1UL
	#define HWRM_FWD_RESP_CMPL_RESP_BUF_ADDR_MASK		    0xfffffffeUL
	#define HWRM_FWD_RESP_CMPL_RESP_BUF_ADDR_SFT		    1
};

/* HWRM Asynchronous Event Completion Record (16 bytes) */
struct hwrm_async_event_cmpl {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_TYPE_MASK		    0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_TYPE_SFT			    0
	#define HWRM_ASYNC_EVENT_CMPL_TYPE_HWRM_ASYNC_EVENT       (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_LINK_STATUS_CHANGE (0x0UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_LINK_MTU_CHANGE    (0x1UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_LINK_SPEED_CHANGE  (0x2UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_DCB_CONFIG_CHANGE  (0x3UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_PORT_CONN_NOT_ALLOWED (0x4UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_LINK_SPEED_CFG_NOT_ALLOWED (0x5UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_FUNC_DRVR_UNLOAD   (0x10UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_FUNC_DRVR_LOAD     (0x11UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_PF_DRVR_UNLOAD     (0x20UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_PF_DRVR_LOAD       (0x21UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_VF_FLR		   (0x30UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_VF_MAC_ADDR_CHANGE (0x31UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_PF_VF_COMM_STATUS_CHANGE (0x32UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_VF_CFG_CHANGE      (0x33UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_EVENT_ID_HWRM_ERROR	   (0xffUL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_V			    0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_OPAQUE_MASK		    0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_OPAQUE_SFT		    1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
};

/* HWRM Asynchronous Event Completion Record for link status change (16 bytes) */
struct hwrm_async_event_cmpl_link_status_change {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_TYPE_MASK 0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_TYPE_SFT  0
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_EVENT_ID_LINK_STATUS_CHANGE (0x0UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_V	    0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_OPAQUE_MASK 0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_OPAQUE_SFT 1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_EVENT_DATA1_LINK_CHANGE 0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_EVENT_DATA1_LINK_CHANGE_DOWN (0x0UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_EVENT_DATA1_LINK_CHANGE_UP (0x1UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_EVENT_DATA1_LINK_CHANGE_LAST    HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_EVENT_DATA1_LINK_CHANGE_UP
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_EVENT_DATA1_PORT_MASK 0xeUL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_EVENT_DATA1_PORT_SFT 1
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_EVENT_DATA1_PORT_ID_MASK 0xffff0UL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_STATUS_CHANGE_EVENT_DATA1_PORT_ID_SFT 4
};

/* HWRM Asynchronous Event Completion Record for link MTU change (16 bytes) */
struct hwrm_async_event_cmpl_link_mtu_change {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_MTU_CHANGE_TYPE_MASK    0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_MTU_CHANGE_TYPE_SFT     0
	#define HWRM_ASYNC_EVENT_CMPL_LINK_MTU_CHANGE_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_MTU_CHANGE_EVENT_ID_LINK_MTU_CHANGE (0x1UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_MTU_CHANGE_V	    0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_MTU_CHANGE_OPAQUE_MASK  0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_MTU_CHANGE_OPAQUE_SFT   1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_MTU_CHANGE_EVENT_DATA1_NEW_MTU_MASK 0xffffUL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_MTU_CHANGE_EVENT_DATA1_NEW_MTU_SFT 0
};

/* HWRM Asynchronous Event Completion Record for link speed change (16 bytes) */
struct hwrm_async_event_cmpl_link_speed_change {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_TYPE_MASK  0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_TYPE_SFT   0
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_ID_LINK_SPEED_CHANGE (0x2UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_V	    0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_OPAQUE_MASK 0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_OPAQUE_SFT 1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_FORCE 0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_MASK 0xfffeUL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_SFT 1
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_100MB (0x1UL << 1)
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_1GB (0xaUL << 1)
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_2GB (0x14UL << 1)
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_2_5GB (0x19UL << 1)
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_10GB (0x64UL << 1)
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_20GB (0xc8UL << 1)
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_25GB (0xfaUL << 1)
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_40GB (0x190UL << 1)
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_50GB (0x1f4UL << 1)
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_100GB (0x3e8UL << 1)
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_10MB (0xffffUL << 1)
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_LAST    HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_NEW_LINK_SPEED_100MBPS_10MB
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_PORT_ID_MASK 0xffff0000UL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CHANGE_EVENT_DATA1_PORT_ID_SFT 16
};

/* HWRM Asynchronous Event Completion Record for DCB Config change (16 bytes) */
struct hwrm_async_event_cmpl_dcb_config_change {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_DCB_CONFIG_CHANGE_TYPE_MASK  0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_DCB_CONFIG_CHANGE_TYPE_SFT   0
	#define HWRM_ASYNC_EVENT_CMPL_DCB_CONFIG_CHANGE_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_DCB_CONFIG_CHANGE_EVENT_ID_DCB_CONFIG_CHANGE (0x3UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_DCB_CONFIG_CHANGE_V	    0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_DCB_CONFIG_CHANGE_OPAQUE_MASK 0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_DCB_CONFIG_CHANGE_OPAQUE_SFT 1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_DCB_CONFIG_CHANGE_EVENT_DATA1_PORT_ID_MASK 0xffffUL
	#define HWRM_ASYNC_EVENT_CMPL_DCB_CONFIG_CHANGE_EVENT_DATA1_PORT_ID_SFT 0
};

/* HWRM Asynchronous Event Completion Record for port connection not allowed (16 bytes) */
struct hwrm_async_event_cmpl_port_conn_not_allowed {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_TYPE_MASK 0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_TYPE_SFT 0
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_EVENT_ID_PORT_CONN_NOT_ALLOWED (0x4UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_V      0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_OPAQUE_MASK 0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_OPAQUE_SFT 1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_EVENT_DATA1_PORT_ID_MASK 0xffffUL
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_EVENT_DATA1_PORT_ID_SFT 0
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_EVENT_DATA1_ENFORCEMENT_POLICY_MASK 0xff0000UL
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_EVENT_DATA1_ENFORCEMENT_POLICY_SFT 16
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_EVENT_DATA1_ENFORCEMENT_POLICY_NONE (0x0UL << 16)
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_EVENT_DATA1_ENFORCEMENT_POLICY_DISABLETX (0x1UL << 16)
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_EVENT_DATA1_ENFORCEMENT_POLICY_WARNINGMSG (0x2UL << 16)
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_EVENT_DATA1_ENFORCEMENT_POLICY_PWRDOWN (0x3UL << 16)
	#define HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_EVENT_DATA1_ENFORCEMENT_POLICY_LAST    HWRM_ASYNC_EVENT_CMPL_PORT_CONN_NOT_ALLOWED_EVENT_DATA1_ENFORCEMENT_POLICY_PWRDOWN
};

/* HWRM Asynchronous Event Completion Record for link speed config not allowed (16 bytes) */
struct hwrm_async_event_cmpl_link_speed_cfg_not_allowed {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CFG_NOT_ALLOWED_TYPE_MASK 0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CFG_NOT_ALLOWED_TYPE_SFT 0
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CFG_NOT_ALLOWED_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CFG_NOT_ALLOWED_EVENT_ID_LINK_SPEED_CFG_NOT_ALLOWED (0x5UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CFG_NOT_ALLOWED_V 0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CFG_NOT_ALLOWED_OPAQUE_MASK 0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CFG_NOT_ALLOWED_OPAQUE_SFT 1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CFG_NOT_ALLOWED_EVENT_DATA1_PORT_ID_MASK 0xffffUL
	#define HWRM_ASYNC_EVENT_CMPL_LINK_SPEED_CFG_NOT_ALLOWED_EVENT_DATA1_PORT_ID_SFT 0
};

/* HWRM Asynchronous Event Completion Record for Function Driver Unload (16 bytes) */
struct hwrm_async_event_cmpl_func_drvr_unload {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_UNLOAD_TYPE_MASK   0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_UNLOAD_TYPE_SFT    0
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_UNLOAD_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_UNLOAD_EVENT_ID_FUNC_DRVR_UNLOAD (0x10UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_UNLOAD_V	    0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_UNLOAD_OPAQUE_MASK 0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_UNLOAD_OPAQUE_SFT  1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_UNLOAD_EVENT_DATA1_FUNC_ID_MASK 0xffffUL
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_UNLOAD_EVENT_DATA1_FUNC_ID_SFT 0
};

/* HWRM Asynchronous Event Completion Record for Function Driver load (16 bytes) */
struct hwrm_async_event_cmpl_func_drvr_load {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_LOAD_TYPE_MASK     0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_LOAD_TYPE_SFT      0
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_LOAD_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_LOAD_EVENT_ID_FUNC_DRVR_LOAD (0x11UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_LOAD_V		    0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_LOAD_OPAQUE_MASK   0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_LOAD_OPAQUE_SFT    1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_LOAD_EVENT_DATA1_FUNC_ID_MASK 0xffffUL
	#define HWRM_ASYNC_EVENT_CMPL_FUNC_DRVR_LOAD_EVENT_DATA1_FUNC_ID_SFT 0
};

/* HWRM Asynchronous Event Completion Record for PF Driver Unload (16 bytes) */
struct hwrm_async_event_cmpl_pf_drvr_unload {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_UNLOAD_TYPE_MASK     0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_UNLOAD_TYPE_SFT      0
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_UNLOAD_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_UNLOAD_EVENT_ID_PF_DRVR_UNLOAD (0x20UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_UNLOAD_V		    0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_UNLOAD_OPAQUE_MASK   0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_UNLOAD_OPAQUE_SFT    1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_UNLOAD_EVENT_DATA1_FUNC_ID_MASK 0xffffUL
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_UNLOAD_EVENT_DATA1_FUNC_ID_SFT 0
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_UNLOAD_EVENT_DATA1_PORT_MASK 0x70000UL
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_UNLOAD_EVENT_DATA1_PORT_SFT 16
};

/* HWRM Asynchronous Event Completion Record for PF Driver load (16 bytes) */
struct hwrm_async_event_cmpl_pf_drvr_load {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_LOAD_TYPE_MASK       0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_LOAD_TYPE_SFT	    0
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_LOAD_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_LOAD_EVENT_ID_PF_DRVR_LOAD (0x21UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_LOAD_V		    0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_LOAD_OPAQUE_MASK     0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_LOAD_OPAQUE_SFT      1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_LOAD_EVENT_DATA1_FUNC_ID_MASK 0xffffUL
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_LOAD_EVENT_DATA1_FUNC_ID_SFT 0
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_LOAD_EVENT_DATA1_PORT_MASK 0x70000UL
	#define HWRM_ASYNC_EVENT_CMPL_PF_DRVR_LOAD_EVENT_DATA1_PORT_SFT 16
};

/* HWRM Asynchronous Event Completion Record for VF FLR (16 bytes) */
struct hwrm_async_event_cmpl_vf_flr {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_VF_FLR_TYPE_MASK		    0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_VF_FLR_TYPE_SFT		    0
	#define HWRM_ASYNC_EVENT_CMPL_VF_FLR_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_VF_FLR_EVENT_ID_VF_FLR      (0x30UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_VF_FLR_V			    0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_VF_FLR_OPAQUE_MASK	    0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_VF_FLR_OPAQUE_SFT	    1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_VF_FLR_EVENT_DATA1_VF_ID_MASK 0xffffUL
	#define HWRM_ASYNC_EVENT_CMPL_VF_FLR_EVENT_DATA1_VF_ID_SFT 0
};

/* HWRM Asynchronous Event Completion Record for VF MAC Addr change (16 bytes) */
struct hwrm_async_event_cmpl_vf_mac_addr_change {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_VF_MAC_ADDR_CHANGE_TYPE_MASK 0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_VF_MAC_ADDR_CHANGE_TYPE_SFT  0
	#define HWRM_ASYNC_EVENT_CMPL_VF_MAC_ADDR_CHANGE_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_VF_MAC_ADDR_CHANGE_EVENT_ID_VF_MAC_ADDR_CHANGE (0x31UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_VF_MAC_ADDR_CHANGE_V	    0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_VF_MAC_ADDR_CHANGE_OPAQUE_MASK 0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_VF_MAC_ADDR_CHANGE_OPAQUE_SFT 1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_VF_MAC_ADDR_CHANGE_EVENT_DATA1_VF_ID_MASK 0xffffUL
	#define HWRM_ASYNC_EVENT_CMPL_VF_MAC_ADDR_CHANGE_EVENT_DATA1_VF_ID_SFT 0
};

/* HWRM Asynchronous Event Completion Record for PF-VF communication status change (16 bytes) */
struct hwrm_async_event_cmpl_pf_vf_comm_status_change {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_PF_VF_COMM_STATUS_CHANGE_TYPE_MASK 0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_PF_VF_COMM_STATUS_CHANGE_TYPE_SFT 0
	#define HWRM_ASYNC_EVENT_CMPL_PF_VF_COMM_STATUS_CHANGE_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_PF_VF_COMM_STATUS_CHANGE_EVENT_ID_PF_VF_COMM_STATUS_CHANGE (0x32UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_PF_VF_COMM_STATUS_CHANGE_V   0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_PF_VF_COMM_STATUS_CHANGE_OPAQUE_MASK 0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_PF_VF_COMM_STATUS_CHANGE_OPAQUE_SFT 1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_PF_VF_COMM_STATUS_CHANGE_EVENT_DATA1_COMM_ESTABLISHED 0x1UL
};

/* HWRM Asynchronous Event Completion Record for VF configuration change (16 bytes) */
struct hwrm_async_event_cmpl_vf_cfg_change {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_VF_CFG_CHANGE_TYPE_MASK      0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_VF_CFG_CHANGE_TYPE_SFT       0
	#define HWRM_ASYNC_EVENT_CMPL_VF_CFG_CHANGE_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_VF_CFG_CHANGE_EVENT_ID_VF_CFG_CHANGE (0x33UL << 0)
	uint32_t event_data2;
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_VF_CFG_CHANGE_V		    0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_VF_CFG_CHANGE_OPAQUE_MASK    0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_VF_CFG_CHANGE_OPAQUE_SFT     1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_VF_CFG_CHANGE_EVENT_DATA1_MTU_CHANGE 0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_VF_CFG_CHANGE_EVENT_DATA1_MRU_CHANGE 0x2UL
	#define HWRM_ASYNC_EVENT_CMPL_VF_CFG_CHANGE_EVENT_DATA1_DFLT_MAC_ADDR_CHANGE 0x4UL
	#define HWRM_ASYNC_EVENT_CMPL_VF_CFG_CHANGE_EVENT_DATA1_DFLT_VLAN_CHANGE 0x8UL
};

/* HWRM Asynchronous Event Completion Record for HWRM Error (16 bytes) */
struct hwrm_async_event_cmpl_hwrm_error {
	uint16_t type;
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_TYPE_MASK	    0x3fUL
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_TYPE_SFT	    0
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_TYPE_HWRM_ASYNC_EVENT (0x2eUL << 0)
	uint16_t event_id;
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_EVENT_ID_HWRM_ERROR (0xffUL << 0)
	uint32_t event_data2;
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_EVENT_DATA2_SEVERITY_MASK 0xffUL
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_EVENT_DATA2_SEVERITY_SFT 0
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_EVENT_DATA2_SEVERITY_WARNING (0x0UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_EVENT_DATA2_SEVERITY_NONFATAL (0x1UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_EVENT_DATA2_SEVERITY_FATAL (0x2UL << 0)
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_EVENT_DATA2_SEVERITY_LAST    HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_EVENT_DATA2_SEVERITY_FATAL
	uint8_t opaque_v;
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_V		    0x1UL
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_OPAQUE_MASK       0xfeUL
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_OPAQUE_SFT	    1
	uint8_t timestamp_lo;
	uint16_t timestamp_hi;
	uint32_t event_data1;
	#define HWRM_ASYNC_EVENT_CMPL_HWRM_ERROR_EVENT_DATA1_TIMESTAMP 0x1UL
};

/* Door Bell Formats */
/* TX Door Bell Format (4 bytes) */
struct tx_doorbell {
	uint32_t key_idx;
	#define TX_DOORBELL_IDX_MASK				    0xffffffUL
	#define TX_DOORBELL_IDX_SFT				    0
	#define TX_DOORBELL_RESERVED_MASK			    0xf000000UL
	#define TX_DOORBELL_RESERVED_SFT			    24
	#define TX_DOORBELL_KEY_MASK				    0xf0000000UL
	#define TX_DOORBELL_KEY_SFT				    28
	#define TX_DOORBELL_KEY_TX				   (0x0UL << 28)
};

/* RX Door Bell Format (4 bytes) */
struct rx_doorbell {
	uint32_t key_idx;
	#define RX_DOORBELL_IDX_MASK				    0xffffffUL
	#define RX_DOORBELL_IDX_SFT				    0
	#define RX_DOORBELL_RESERVED_MASK			    0xf000000UL
	#define RX_DOORBELL_RESERVED_SFT			    24
	#define RX_DOORBELL_KEY_MASK				    0xf0000000UL
	#define RX_DOORBELL_KEY_SFT				    28
	#define RX_DOORBELL_KEY_RX				   (0x1UL << 28)
};

/* CMP Door Bell Format (4 bytes) */
struct cmpl_doorbell {
	uint32_t key_mask_valid_idx;
	#define CMPL_DOORBELL_IDX_MASK				    0xffffffUL
	#define CMPL_DOORBELL_IDX_SFT				    0
	#define CMPL_DOORBELL_RESERVED_MASK			    0x3000000UL
	#define CMPL_DOORBELL_RESERVED_SFT			    24
	#define CMPL_DOORBELL_IDX_VALID			    0x4000000UL
	#define CMPL_DOORBELL_MASK				    0x8000000UL
	#define CMPL_DOORBELL_KEY_MASK				    0xf0000000UL
	#define CMPL_DOORBELL_KEY_SFT				    28
	#define CMPL_DOORBELL_KEY_CMPL				   (0x2UL << 28)
};

/* Status Door Bell Format (4 bytes) */
struct status_doorbell {
	uint32_t key_idx;
	#define STATUS_DOORBELL_IDX_MASK			    0xffffffUL
	#define STATUS_DOORBELL_IDX_SFT			    0
	#define STATUS_DOORBELL_RESERVED_MASK			    0xf000000UL
	#define STATUS_DOORBELL_RESERVED_SFT			    24
	#define STATUS_DOORBELL_KEY_MASK			    0xf0000000UL
	#define STATUS_DOORBELL_KEY_SFT			    28
	#define STATUS_DOORBELL_KEY_STAT			   (0x3UL << 28)
};

/* Push w/32B BD Door Bell Format (32 bytes) */
struct push32_doorbell {
	uint32_t key_sz_idx;
	#define PUSH32_DOORBELL_IDX_MASK			    0xffffffUL
	#define PUSH32_DOORBELL_IDX_SFT			    0
	#define PUSH32_DOORBELL_SZ_MASK			    0xf000000UL
	#define PUSH32_DOORBELL_SZ_SFT				    24
	#define PUSH32_DOORBELL_KEY_MASK			    0xf0000000UL
	#define PUSH32_DOORBELL_KEY_SFT			    28
	#define PUSH32_DOORBELL_KEY_PUSH			   (0x4UL << 28)
	uint16_t flags_type;
	#define PUSH32_DOORBELL_TYPE_MASK			    0x3fUL
	#define PUSH32_DOORBELL_TYPE_SFT			    0
	#define PUSH32_DOORBELL_TYPE_TX_BD_LONG		   (0x10UL << 0)
	#define PUSH32_DOORBELL_FLAGS_PACKET_END		    0x40UL
	#define PUSH32_DOORBELL_FLAGS_NO_CMPL			    0x80UL
	#define PUSH32_DOORBELL_FLAGS_BD_CNT_MASK		    0x1f00UL
	#define PUSH32_DOORBELL_FLAGS_BD_CNT_SFT		    8
	#define PUSH32_DOORBELL_FLAGS_LHINT_MASK		    0x6000UL
	#define PUSH32_DOORBELL_FLAGS_LHINT_SFT		    13
	#define PUSH32_DOORBELL_FLAGS_LHINT_LT512		   (0x0UL << 13)
	#define PUSH32_DOORBELL_FLAGS_LHINT_LT1K		   (0x1UL << 13)
	#define PUSH32_DOORBELL_FLAGS_LHINT_LT2K		   (0x2UL << 13)
	#define PUSH32_DOORBELL_FLAGS_LHINT_GTE2K		   (0x3UL << 13)
	#define PUSH32_DOORBELL_FLAGS_LHINT_LAST    PUSH32_DOORBELL_FLAGS_LHINT_GTE2K
	#define PUSH32_DOORBELL_FLAGS_COAL_NOW			    0x8000UL
	#define PUSH32_DOORBELL_FLAGS_MASK			    0xffc0UL
	#define PUSH32_DOORBELL_FLAGS_SFT			    6
	uint16_t len;
	uint32_t opaque;
	uint16_t lflags;
	#define PUSH32_DOORBELL_LFLAGS_TCP_UDP_CHKSUM		    0x1UL
	#define PUSH32_DOORBELL_LFLAGS_IP_CHKSUM		    0x2UL
	#define PUSH32_DOORBELL_LFLAGS_NOCRC			    0x4UL
	#define PUSH32_DOORBELL_LFLAGS_STAMP			    0x8UL
	#define PUSH32_DOORBELL_LFLAGS_T_IP_CHKSUM		    0x10UL
	#define PUSH32_DOORBELL_LFLAGS_LSO			    0x20UL
	#define PUSH32_DOORBELL_LFLAGS_IPID_FMT		    0x40UL
	#define PUSH32_DOORBELL_LFLAGS_T_IPID			    0x80UL
	#define PUSH32_DOORBELL_LFLAGS_ROCE_CRC		    0x100UL
	#define PUSH32_DOORBELL_LFLAGS_FCOE_CRC		    0x200UL
	uint16_t hdr_size;
	#define PUSH32_DOORBELL_HDR_SIZE_MASK			    0x1ffUL
	#define PUSH32_DOORBELL_HDR_SIZE_SFT			    0
	uint32_t mss;
	#define PUSH32_DOORBELL_MSS_MASK			    0x7fffUL
	#define PUSH32_DOORBELL_MSS_SFT			    0
	uint16_t unused_2;
	uint16_t cfa_action;
	uint32_t cfa_meta;
	#define PUSH32_DOORBELL_CFA_META_VLAN_VID_MASK		    0xfffUL
	#define PUSH32_DOORBELL_CFA_META_VLAN_VID_SFT		    0
	#define PUSH32_DOORBELL_CFA_META_VLAN_DE		    0x1000UL
	#define PUSH32_DOORBELL_CFA_META_VLAN_PRI_MASK		    0xe000UL
	#define PUSH32_DOORBELL_CFA_META_VLAN_PRI_SFT		    13
	#define PUSH32_DOORBELL_CFA_META_VLAN_TPID_MASK	    0x70000UL
	#define PUSH32_DOORBELL_CFA_META_VLAN_TPID_SFT		    16
	#define PUSH32_DOORBELL_CFA_META_VLAN_TPID_TPID88A8       (0x0UL << 16)
	#define PUSH32_DOORBELL_CFA_META_VLAN_TPID_TPID8100       (0x1UL << 16)
	#define PUSH32_DOORBELL_CFA_META_VLAN_TPID_TPID9100       (0x2UL << 16)
	#define PUSH32_DOORBELL_CFA_META_VLAN_TPID_TPID9200       (0x3UL << 16)
	#define PUSH32_DOORBELL_CFA_META_VLAN_TPID_TPID9300       (0x4UL << 16)
	#define PUSH32_DOORBELL_CFA_META_VLAN_TPID_TPIDCFG	   (0x5UL << 16)
	#define PUSH32_DOORBELL_CFA_META_VLAN_TPID_LAST    PUSH32_DOORBELL_CFA_META_VLAN_TPID_TPIDCFG
	#define PUSH32_DOORBELL_CFA_META_VLAN_RESERVED_MASK	    0xff80000UL
	#define PUSH32_DOORBELL_CFA_META_VLAN_RESERVED_SFT	    19
	#define PUSH32_DOORBELL_CFA_META_KEY_MASK		    0xf0000000UL
	#define PUSH32_DOORBELL_CFA_META_KEY_SFT		    28
	#define PUSH32_DOORBELL_CFA_META_KEY_NONE		   (0x0UL << 28)
	#define PUSH32_DOORBELL_CFA_META_KEY_VLAN_TAG		   (0x1UL << 28)
	#define PUSH32_DOORBELL_CFA_META_KEY_LAST    PUSH32_DOORBELL_CFA_META_KEY_VLAN_TAG
	uint32_t data[25];
};

/* HW Resource Manager Specification 1.2.1 */
#define HWRM_VERSION_MAJOR	1
#define HWRM_VERSION_MINOR	2
#define HWRM_VERSION_UPDATE	1

#define HWRM_VERSION_STR	"1.2.1"
/*
 * Following is the signature for HWRM message field that indicates not
 * applicable (All F's). Need to cast it the size of the field if needed.
 */
#define HWRM_NA_SIGNATURE	((uint32_t)(-1))
#define HWRM_MAX_REQ_LEN    (128)  /* hwrm_func_buf_rgtr */
#define HWRM_MAX_RESP_LEN    (176)  /* hwrm_func_qstats */
#define HW_HASH_INDEX_SIZE      0x80    /* 7 bit indirection table index. */
#define HW_HASH_KEY_SIZE	40
#define HWRM_RESP_VALID_KEY      1 /* valid key for HWRM response */
/* Input (16 bytes) */
struct input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
};

/* Output (8 bytes) */
struct output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
};

#define GET_HWRM_REQ_TYPE(x) \
	((x) == HWRM_NVM_RAW_WRITE_BLK ? "NvmRawWriteBlk": \
	((x) == HWRM_NVM_WRITE ? "NvmWrite": \
	((x) == HWRM_NVM_READ ? "NvmRead": \
	((x) == HWRM_NVM_RAW_DUMP ? "NvmRawDump": \
	((x) == HWRM_NVM_GET_DIR_INFO ? "NvmGetDirInfo": \
	((x) == HWRM_NVM_GET_DIR_ENTRIES ? "NvmGetDirEntries": \
	((x) == HWRM_NVM_FIND_DIR_ENTRY ? "NvmFindDirEntry": \
	((x) == HWRM_NVM_MOD_DIR_ENTRY ? "NvmModDirEntry": \
	((x) == HWRM_NVM_ERASE_DIR_ENTRY ? "NvmEraseDirEntry": \
	((x) == HWRM_NVM_GET_DEV_INFO ? "NvmGetDevInfo": \
	((x) == HWRM_NVM_VERIFY_UPDATE ? "NvmVerifyUpdate": \
	((x) == HWRM_NVM_MODIFY ? "NvmModify": \
	((x) == HWRM_DBG_DUMP ? "DbgDump": \
	((x) == HWRM_DBG_WRITE_INDIRECT ? "DbgWriteIndirect": \
	((x) == HWRM_DBG_WRITE_DIRECT ? "DbgWriteDirect": \
	((x) == HWRM_DBG_READ_INDIRECT ? "DbgReadIndirect": \
	((x) == HWRM_DBG_READ_DIRECT ? "DbgReadDirect": \
	((x) == HWRM_TEMP_MONITOR_QUERY ? "TempMonitorQuery": \
	((x) == HWRM_FWD_ASYNC_EVENT_CMPL ? "FwdAsyncEventCmpl": \
	((x) == HWRM_FWD_RESP ? "FwdResp": \
	((x) == HWRM_REJECT_FWD_RESP ? "RejectFwdResp": \
	((x) == HWRM_EXEC_FWD_RESP ? "ExecFwdResp": \
	((x) == HWRM_FW_QSTATUS ? "FwQstatus": \
	((x) == HWRM_FW_RESET ? "FwReset": \
	((x) == HWRM_STAT_CTX_CLR_STATS ? "StatCtxClrStats": \
	((x) == HWRM_STAT_CTX_QUERY ? "StatCtxQuery": \
	((x) == HWRM_STAT_CTX_FREE ? "StatCtxFree": \
	((x) == HWRM_STAT_CTX_ALLOC ? "StatCtxAlloc": \
	((x) == HWRM_TUNNEL_DST_PORT_FREE ? "TunnelDstPortFree": \
	((x) == HWRM_TUNNEL_DST_PORT_ALLOC ? "TunnelDstPortAlloc": \
	((x) == HWRM_TUNNEL_DST_PORT_QUERY ? "TunnelDstPortQuery": \
	((x) == HWRM_CFA_EM_FLOW_CFG ? "CfaEmFlowCfg": \
	((x) == HWRM_CFA_EM_FLOW_FREE ? "CfaEmFlowFree": \
	((x) == HWRM_CFA_EM_FLOW_ALLOC ? "CfaEmFlowAlloc": \
	((x) == HWRM_CFA_NTUPLE_FILTER_CFG ? "CfaNtupleFilterCfg": \
	((x) == HWRM_CFA_NTUPLE_FILTER_FREE ? "CfaNtupleFilterFree": \
	((x) == HWRM_CFA_NTUPLE_FILTER_ALLOC ? "CfaNtupleFilterAlloc": \
	((x) == HWRM_CFA_ENCAP_RECORD_FREE ? "CfaEncapRecordFree": \
	((x) == HWRM_CFA_ENCAP_RECORD_ALLOC ? "CfaEncapRecordAlloc": \
	((x) == HWRM_CFA_TUNNEL_FILTER_FREE ? "CfaTunnelFilterFree": \
	((x) == HWRM_CFA_TUNNEL_FILTER_ALLOC ? "CfaTunnelFilterAlloc": \
	((x) == RESERVED3 ? "": \
	((x) == HWRM_CFA_L2_SET_RX_MASK ? "CfaL2SetRxMask": \
	((x) == HWRM_CFA_L2_FILTER_CFG ? "CfaL2FilterCfg": \
	((x) == HWRM_CFA_L2_FILTER_FREE ? "CfaL2FilterFree": \
	((x) == HWRM_CFA_L2_FILTER_ALLOC ? "CfaL2FilterAlloc": \
	((x) == HWRM_VNIC_RSS_COS_LB_CTX_FREE ? "VnicRssCosLbCtxFree": \
	((x) == HWRM_VNIC_RSS_COS_LB_CTX_ALLOC ? "VnicRssCosLbCtxAlloc": \
	((x) == HWRM_RING_GRP_FREE ? "RingGrpFree": \
	((x) == HWRM_RING_GRP_ALLOC ? "RingGrpAlloc": \
	((x) == HWRM_RING_RESET ? "RingReset": \
	((x) == HWRM_RING_CMPL_RING_CFG_AGGINT_PARAMS ? "RingCmplRingCfgAggintParams": \
	((x) == HWRM_RING_CMPL_RING_QAGGINT_PARAMS ? "RingCmplRingQaggintParams": \
	((x) == HWRM_RING_FREE ? "RingFree": \
	((x) == HWRM_RING_ALLOC ? "RingAlloc": \
	((x) == HWRM_VNIC_PLCMODES_QCFG ? "VnicPlcmodesQcfg": \
	((x) == HWRM_VNIC_PLCMODES_CFG ? "VnicPlcmodesCfg": \
	((x) == HWRM_VNIC_RSS_QCFG ? "VnicRssQcfg": \
	((x) == HWRM_VNIC_RSS_CFG ? "VnicRssCfg": \
	((x) == HWRM_VNIC_TPA_QCFG ? "VnicTpaQcfg": \
	((x) == HWRM_VNIC_TPA_CFG ? "VnicTpaCfg": \
	((x) == HWRM_VNIC_QCFG ? "VnicQcfg": \
	((x) == HWRM_VNIC_CFG ? "VnicCfg": \
	((x) == HWRM_VNIC_FREE ? "VnicFree": \
	((x) == HWRM_VNIC_ALLOC ? "VnicAlloc": \
	((x) == HWRM_QUEUE_COS2BW_CFG ? "QueueCos2bwCfg": \
	((x) == HWRM_QUEUE_COS2BW_QCFG ? "QueueCos2bwQcfg": \
	((x) == HWRM_QUEUE_PRI2COS_CFG ? "QueuePri2cosCfg": \
	((x) == HWRM_QUEUE_PRI2COS_QCFG ? "QueuePri2cosQcfg": \
	((x) == HWRM_QUEUE_PFCENABLE_CFG ? "QueuePfcenableCfg": \
	((x) == HWRM_QUEUE_PFCENABLE_QCFG ? "QueuePfcenableQcfg": \
	((x) == HWRM_QUEUE_BUFFERS_CFG ? "QueueBuffersCfg": \
	((x) == HWRM_QUEUE_BUFFERS_QCFG ? "QueueBuffersQcfg": \
	((x) == HWRM_QUEUE_CFG ? "QueueCfg": \
	((x) == HWRM_QUEUE_QCFG ? "QueueQcfg": \
	((x) == HWRM_QUEUE_QPORTCFG ? "QueueQportcfg": \
	((x) == HWRM_PORT_PHY_I2C_READ ? "PortPhyI2cRead": \
	((x) == HWRM_PORT_PHY_I2C_WRITE ? "PortPhyI2cWrite": \
	((x) == HWRM_PORT_PHY_QCAPS ? "PortPhyQcaps": \
	((x) == HWRM_PORT_BLINK_LED ? "PortBlinkLed": \
	((x) == HWRM_PORT_MAC_QCFG ? "PortMacQcfg": \
	((x) == HWRM_PORT_PHY_QCFG ? "PortPhyQcfg": \
	((x) == HWRM_PORT_LPBK_CLR_STATS ? "PortLpbkClrStats": \
	((x) == HWRM_PORT_CLR_STATS ? "PortClrStats": \
	((x) == HWRM_PORT_LPBK_QSTATS ? "PortLpbkQstats": \
	((x) == HWRM_PORT_QSTATS ? "PortQstats": \
	((x) == HWRM_PORT_TS_QUERY ? "PortTsQuery": \
	((x) == HWRM_PORT_MAC_CFG ? "PortMacCfg": \
	((x) == HWRM_PORT_PHY_CFG ? "PortPhyCfg": \
	((x) == HWRM_FUNC_BUF_RGTR ? "FuncBufRgtr": \
	((x) == HWRM_FUNC_DRV_QVER ? "FuncDrvQver": \
	((x) == HWRM_FUNC_DRV_RGTR ? "FuncDrvRgtr": \
	((x) == HWRM_FUNC_VF_VNIC_IDS_QUERY ? "FuncVfVnicIdsQuery": \
	((x) == HWRM_FUNC_VF_RESC_FREE ? "FuncVfRescFree": \
	((x) == HWRM_FUNC_DRV_UNRGTR ? "FuncDrvUnrgtr": \
	((x) == HWRM_FUNC_CLR_STATS ? "FuncClrStats": \
	((x) == HWRM_FUNC_QSTATS ? "FuncQstats": \
	((x) == HWRM_FUNC_CFG ? "FuncCfg": \
	((x) == HWRM_FUNC_QCFG ? "FuncQcfg": \
	((x) == HWRM_FUNC_QCAPS ? "FuncQcaps": \
	((x) == HWRM_FUNC_VF_FREE ? "FuncVfFree": \
	((x) == HWRM_FUNC_VF_ALLOC ? "FuncVfAlloc": \
	((x) == HWRM_FUNC_GETFID ? "FuncGetfid": \
	((x) == HWRM_FUNC_RESET ? "FuncReset": \
	((x) == RESERVED1 ? "": \
	((x) == HWRM_FUNC_VF_CFG ? "FuncVfCfg": \
	((x) == HWRM_FUNC_BUF_UNRGTR ? "FuncBufUnrgtr": \
	((x) == HWRM_VER_GET ? "VerGet": \
	"Unknown req_type"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

/* Command numbering (8 bytes) */
struct cmd_nums {
	uint16_t req_type;
	#define HWRM_VER_GET					   (0x0UL)
	#define HWRM_FUNC_BUF_UNRGTR				   (0xeUL)
	#define HWRM_FUNC_VF_CFG				   (0xfUL)
	#define RESERVED1					   (0x10UL)
	#define HWRM_FUNC_RESET				   (0x11UL)
	#define HWRM_FUNC_GETFID				   (0x12UL)
	#define HWRM_FUNC_VF_ALLOC				   (0x13UL)
	#define HWRM_FUNC_VF_FREE				   (0x14UL)
	#define HWRM_FUNC_QCAPS				   (0x15UL)
	#define HWRM_FUNC_QCFG					   (0x16UL)
	#define HWRM_FUNC_CFG					   (0x17UL)
	#define HWRM_FUNC_QSTATS				   (0x18UL)
	#define HWRM_FUNC_CLR_STATS				   (0x19UL)
	#define HWRM_FUNC_DRV_UNRGTR				   (0x1aUL)
	#define HWRM_FUNC_VF_RESC_FREE				   (0x1bUL)
	#define HWRM_FUNC_VF_VNIC_IDS_QUERY			   (0x1cUL)
	#define HWRM_FUNC_DRV_RGTR				   (0x1dUL)
	#define HWRM_FUNC_DRV_QVER				   (0x1eUL)
	#define HWRM_FUNC_BUF_RGTR				   (0x1fUL)
	#define HWRM_PORT_PHY_CFG				   (0x20UL)
	#define HWRM_PORT_MAC_CFG				   (0x21UL)
	#define HWRM_PORT_TS_QUERY				   (0x22UL)
	#define HWRM_PORT_QSTATS				   (0x23UL)
	#define HWRM_PORT_LPBK_QSTATS				   (0x24UL)
	#define HWRM_PORT_CLR_STATS				   (0x25UL)
	#define HWRM_PORT_LPBK_CLR_STATS			   (0x26UL)
	#define HWRM_PORT_PHY_QCFG				   (0x27UL)
	#define HWRM_PORT_MAC_QCFG				   (0x28UL)
	#define HWRM_PORT_BLINK_LED				   (0x29UL)
	#define HWRM_PORT_PHY_QCAPS				   (0x2aUL)
	#define HWRM_PORT_PHY_I2C_WRITE			   (0x2bUL)
	#define HWRM_PORT_PHY_I2C_READ				   (0x2cUL)
	#define HWRM_QUEUE_QPORTCFG				   (0x30UL)
	#define HWRM_QUEUE_QCFG				   (0x31UL)
	#define HWRM_QUEUE_CFG					   (0x32UL)
	#define HWRM_QUEUE_BUFFERS_QCFG			   (0x33UL)
	#define HWRM_QUEUE_BUFFERS_CFG				   (0x34UL)
	#define HWRM_QUEUE_PFCENABLE_QCFG			   (0x35UL)
	#define HWRM_QUEUE_PFCENABLE_CFG			   (0x36UL)
	#define HWRM_QUEUE_PRI2COS_QCFG			   (0x37UL)
	#define HWRM_QUEUE_PRI2COS_CFG				   (0x38UL)
	#define HWRM_QUEUE_COS2BW_QCFG				   (0x39UL)
	#define HWRM_QUEUE_COS2BW_CFG				   (0x3aUL)
	#define HWRM_VNIC_ALLOC				   (0x40UL)
	#define HWRM_VNIC_FREE					   (0x41UL)
	#define HWRM_VNIC_CFG					   (0x42UL)
	#define HWRM_VNIC_QCFG					   (0x43UL)
	#define HWRM_VNIC_TPA_CFG				   (0x44UL)
	#define HWRM_VNIC_TPA_QCFG				   (0x45UL)
	#define HWRM_VNIC_RSS_CFG				   (0x46UL)
	#define HWRM_VNIC_RSS_QCFG				   (0x47UL)
	#define HWRM_VNIC_PLCMODES_CFG				   (0x48UL)
	#define HWRM_VNIC_PLCMODES_QCFG			   (0x49UL)
	#define HWRM_RING_ALLOC				   (0x50UL)
	#define HWRM_RING_FREE					   (0x51UL)
	#define HWRM_RING_CMPL_RING_QAGGINT_PARAMS		   (0x52UL)
	#define HWRM_RING_CMPL_RING_CFG_AGGINT_PARAMS		   (0x53UL)
	#define HWRM_RING_RESET				   (0x5eUL)
	#define HWRM_RING_GRP_ALLOC				   (0x60UL)
	#define HWRM_RING_GRP_FREE				   (0x61UL)
	#define HWRM_VNIC_RSS_COS_LB_CTX_ALLOC			   (0x70UL)
	#define HWRM_VNIC_RSS_COS_LB_CTX_FREE			   (0x71UL)
	#define HWRM_CFA_L2_FILTER_ALLOC			   (0x90UL)
	#define HWRM_CFA_L2_FILTER_FREE			   (0x91UL)
	#define HWRM_CFA_L2_FILTER_CFG				   (0x92UL)
	#define HWRM_CFA_L2_SET_RX_MASK			   (0x93UL)
	#define RESERVED3					   (0x94UL)
	#define HWRM_CFA_TUNNEL_FILTER_ALLOC			   (0x95UL)
	#define HWRM_CFA_TUNNEL_FILTER_FREE			   (0x96UL)
	#define HWRM_CFA_ENCAP_RECORD_ALLOC			   (0x97UL)
	#define HWRM_CFA_ENCAP_RECORD_FREE			   (0x98UL)
	#define HWRM_CFA_NTUPLE_FILTER_ALLOC			   (0x99UL)
	#define HWRM_CFA_NTUPLE_FILTER_FREE			   (0x9aUL)
	#define HWRM_CFA_NTUPLE_FILTER_CFG			   (0x9bUL)
	#define HWRM_CFA_EM_FLOW_ALLOC				   (0x9cUL)
	#define HWRM_CFA_EM_FLOW_FREE				   (0x9dUL)
	#define HWRM_CFA_EM_FLOW_CFG				   (0x9eUL)
	#define HWRM_TUNNEL_DST_PORT_QUERY			   (0xa0UL)
	#define HWRM_TUNNEL_DST_PORT_ALLOC			   (0xa1UL)
	#define HWRM_TUNNEL_DST_PORT_FREE			   (0xa2UL)
	#define HWRM_STAT_CTX_ALLOC				   (0xb0UL)
	#define HWRM_STAT_CTX_FREE				   (0xb1UL)
	#define HWRM_STAT_CTX_QUERY				   (0xb2UL)
	#define HWRM_STAT_CTX_CLR_STATS			   (0xb3UL)
	#define HWRM_FW_RESET					   (0xc0UL)
	#define HWRM_FW_QSTATUS				   (0xc1UL)
	#define HWRM_EXEC_FWD_RESP				   (0xd0UL)
	#define HWRM_REJECT_FWD_RESP				   (0xd1UL)
	#define HWRM_FWD_RESP					   (0xd2UL)
	#define HWRM_FWD_ASYNC_EVENT_CMPL			   (0xd3UL)
	#define HWRM_TEMP_MONITOR_QUERY			   (0xe0UL)
	#define HWRM_DBG_READ_DIRECT				   (0xff10UL)
	#define HWRM_DBG_READ_INDIRECT				   (0xff11UL)
	#define HWRM_DBG_WRITE_DIRECT				   (0xff12UL)
	#define HWRM_DBG_WRITE_INDIRECT			   (0xff13UL)
	#define HWRM_DBG_DUMP					   (0xff14UL)
	#define HWRM_NVM_MODIFY				   (0xfff4UL)
	#define HWRM_NVM_VERIFY_UPDATE				   (0xfff5UL)
	#define HWRM_NVM_GET_DEV_INFO				   (0xfff6UL)
	#define HWRM_NVM_ERASE_DIR_ENTRY			   (0xfff7UL)
	#define HWRM_NVM_MOD_DIR_ENTRY				   (0xfff8UL)
	#define HWRM_NVM_FIND_DIR_ENTRY			   (0xfff9UL)
	#define HWRM_NVM_GET_DIR_ENTRIES			   (0xfffaUL)
	#define HWRM_NVM_GET_DIR_INFO				   (0xfffbUL)
	#define HWRM_NVM_RAW_DUMP				   (0xfffcUL)
	#define HWRM_NVM_READ					   (0xfffdUL)
	#define HWRM_NVM_WRITE					   (0xfffeUL)
	#define HWRM_NVM_RAW_WRITE_BLK				   (0xffffUL)
	uint16_t unused_0[3];
};

#define GET_HWRM_ERROR_CODE(x) \
	((x) == HWRM_ERR_CODE_CMD_NOT_SUPPORTED ? "CmdNotSupported": \
	((x) == HWRM_ERR_CODE_UNKNOWN_ERR ? "UnknownErr": \
	((x) == HWRM_ERR_CODE_HWRM_ERROR ? "HwrmError": \
	((x) == HWRM_ERR_CODE_INVALID_ENABLES ? "InvalidEnables": \
	((x) == HWRM_ERR_CODE_INVALID_FLAGS ? "InvalidFlags": \
	((x) == HWRM_ERR_CODE_RESOURCE_ALLOC_ERROR ? "ResourceAllocError": \
	((x) == HWRM_ERR_CODE_RESOURCE_ACCESS_DENIED ? "ResourceAccessDenied": \
	((x) == HWRM_ERR_CODE_INVALID_PARAMS ? "InvalidParams": \
	((x) == HWRM_ERR_CODE_FAIL ? "Fail": \
	((x) == HWRM_ERR_CODE_SUCCESS ? "Success": \
	"Unknown error_code"))))))))))

/* Return Codes (8 bytes) */
struct ret_codes {
	uint16_t error_code;
	#define HWRM_ERR_CODE_SUCCESS				   (0x0UL)
	#define HWRM_ERR_CODE_FAIL				   (0x1UL)
	#define HWRM_ERR_CODE_INVALID_PARAMS			   (0x2UL)
	#define HWRM_ERR_CODE_RESOURCE_ACCESS_DENIED		   (0x3UL)
	#define HWRM_ERR_CODE_RESOURCE_ALLOC_ERROR		   (0x4UL)
	#define HWRM_ERR_CODE_INVALID_FLAGS			   (0x5UL)
	#define HWRM_ERR_CODE_INVALID_ENABLES			   (0x6UL)
	#define HWRM_ERR_CODE_HWRM_ERROR			   (0xfUL)
	#define HWRM_ERR_CODE_UNKNOWN_ERR			   (0xfffeUL)
	#define HWRM_ERR_CODE_CMD_NOT_SUPPORTED		   (0xffffUL)
	uint16_t unused_0[3];
};

/* Output (16 bytes) */
struct hwrm_err_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t opaque_0;
	uint16_t opaque_1;
	uint8_t cmd_err;
	uint8_t valid;
};

/* Port Tx Statistics Formats (408 bytes) */
struct tx_port_stats {
	uint64_t tx_64b_frames;
	uint64_t tx_65b_127b_frames;
	uint64_t tx_128b_255b_frames;
	uint64_t tx_256b_511b_frames;
	uint64_t tx_512b_1023b_frames;
	uint64_t tx_1024b_1518_frames;
	uint64_t tx_good_vlan_frames;
	uint64_t tx_1519b_2047_frames;
	uint64_t tx_2048b_4095b_frames;
	uint64_t tx_4096b_9216b_frames;
	uint64_t tx_9217b_16383b_frames;
	uint64_t tx_good_frames;
	uint64_t tx_total_frames;
	uint64_t tx_ucast_frames;
	uint64_t tx_mcast_frames;
	uint64_t tx_bcast_frames;
	uint64_t tx_pause_frames;
	uint64_t tx_pfc_frames;
	uint64_t tx_jabber_frames;
	uint64_t tx_fcs_err_frames;
	uint64_t tx_control_frames;
	uint64_t tx_oversz_frames;
	uint64_t tx_single_dfrl_frames;
	uint64_t tx_multi_dfrl_frames;
	uint64_t tx_single_coll_frames;
	uint64_t tx_multi_coll_frames;
	uint64_t tx_late_coll_frames;
	uint64_t tx_excessive_coll_frames;
	uint64_t tx_frag_frames;
	uint64_t tx_err;
	uint64_t tx_tagged_frames;
	uint64_t tx_dbl_tagged_frames;
	uint64_t tx_runt_frames;
	uint64_t tx_fifo_underruns;
	uint64_t tx_pfc_ena_frames_pri0;
	uint64_t tx_pfc_ena_frames_pri1;
	uint64_t tx_pfc_ena_frames_pri2;
	uint64_t tx_pfc_ena_frames_pri3;
	uint64_t tx_pfc_ena_frames_pri4;
	uint64_t tx_pfc_ena_frames_pri5;
	uint64_t tx_pfc_ena_frames_pri6;
	uint64_t tx_pfc_ena_frames_pri7;
	uint64_t tx_eee_lpi_events;
	uint64_t tx_eee_lpi_duration;
	uint64_t tx_llfc_logical_msgs;
	uint64_t tx_hcfc_msgs;
	uint64_t tx_total_collisions;
	uint64_t tx_bytes;
	uint64_t tx_xthol_frames;
	uint64_t tx_stat_discard;
	uint64_t tx_stat_error;
};

/* Port Rx Statistics Formats (528 bytes) */
struct rx_port_stats {
	uint64_t rx_64b_frames;
	uint64_t rx_65b_127b_frames;
	uint64_t rx_128b_255b_frames;
	uint64_t rx_256b_511b_frames;
	uint64_t rx_512b_1023b_frames;
	uint64_t rx_1024b_1518_frames;
	uint64_t rx_good_vlan_frames;
	uint64_t rx_1519b_2047b_frames;
	uint64_t rx_2048b_4095b_frames;
	uint64_t rx_4096b_9216b_frames;
	uint64_t rx_9217b_16383b_frames;
	uint64_t rx_total_frames;
	uint64_t rx_ucast_frames;
	uint64_t rx_mcast_frames;
	uint64_t rx_bcast_frames;
	uint64_t rx_fcs_err_frames;
	uint64_t rx_ctrl_frames;
	uint64_t rx_pause_frames;
	uint64_t rx_pfc_frames;
	uint64_t rx_unsupported_opcode_frames;
	uint64_t rx_unsupported_da_pausepfc_frames;
	uint64_t rx_wrong_sa_frames;
	uint64_t rx_align_err_frames;
	uint64_t rx_oor_len_frames;
	uint64_t rx_code_err_frames;
	uint64_t rx_false_carrier_frames;
	uint64_t rx_ovrsz_frames;
	uint64_t rx_jbr_frames;
	uint64_t rx_mtu_err_frames;
	uint64_t rx_match_crc_frames;
	uint64_t rx_promiscuous_frames;
	uint64_t rx_tagged_frames;
	uint64_t rx_double_tagged_frames;
	uint64_t rx_trunc_frames;
	uint64_t rx_good_frames;
	uint64_t rx_pfc_xon2xoff_frames_pri0;
	uint64_t rx_pfc_xon2xoff_frames_pri1;
	uint64_t rx_pfc_xon2xoff_frames_pri2;
	uint64_t rx_pfc_xon2xoff_frames_pri3;
	uint64_t rx_pfc_xon2xoff_frames_pri4;
	uint64_t rx_pfc_xon2xoff_frames_pri5;
	uint64_t rx_pfc_xon2xoff_frames_pri6;
	uint64_t rx_pfc_xon2xoff_frames_pri7;
	uint64_t rx_pfc_ena_frames_pri0;
	uint64_t rx_pfc_ena_frames_pri1;
	uint64_t rx_pfc_ena_frames_pri2;
	uint64_t rx_pfc_ena_frames_pri3;
	uint64_t rx_pfc_ena_frames_pri4;
	uint64_t rx_pfc_ena_frames_pri5;
	uint64_t rx_pfc_ena_frames_pri6;
	uint64_t rx_pfc_ena_frames_pri7;
	uint64_t rx_sch_crc_err_frames;
	uint64_t rx_undrsz_frames;
	uint64_t rx_frag_frames;
	uint64_t rx_eee_lpi_events;
	uint64_t rx_eee_lpi_duration;
	uint64_t rx_llfc_physical_msgs;
	uint64_t rx_llfc_logical_msgs;
	uint64_t rx_llfc_msgs_with_crc_err;
	uint64_t rx_hcfc_msgs;
	uint64_t rx_hcfc_msgs_with_crc_err;
	uint64_t rx_bytes;
	uint64_t rx_runt_bytes;
	uint64_t rx_runt_frames;
	uint64_t rx_stat_discard;
	uint64_t rx_stat_err;
};

/* hwrm_ver_get */
/* Input (24 bytes) */
struct hwrm_ver_get_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint8_t hwrm_intf_maj;
	uint8_t hwrm_intf_min;
	uint8_t hwrm_intf_upd;
	uint8_t unused_0[5];
};

/* Output (128 bytes) */
struct hwrm_ver_get_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint8_t hwrm_intf_maj;
	uint8_t hwrm_intf_min;
	uint8_t hwrm_intf_upd;
	uint8_t hwrm_intf_rsvd;
	uint8_t hwrm_fw_maj;
	uint8_t hwrm_fw_min;
	uint8_t hwrm_fw_bld;
	uint8_t hwrm_fw_rsvd;
	uint8_t mgmt_fw_maj;
	uint8_t mgmt_fw_min;
	uint8_t mgmt_fw_bld;
	uint8_t mgmt_fw_rsvd;
	uint8_t netctrl_fw_maj;
	uint8_t netctrl_fw_min;
	uint8_t netctrl_fw_bld;
	uint8_t netctrl_fw_rsvd;
	uint32_t reserved1;
	uint8_t roce_fw_maj;
	uint8_t roce_fw_min;
	uint8_t roce_fw_bld;
	uint8_t roce_fw_rsvd;
	char hwrm_fw_name[16];
	char mgmt_fw_name[16];
	char netctrl_fw_name[16];
	uint32_t reserved2[4];
	char roce_fw_name[16];
	uint16_t chip_num;
	uint8_t chip_rev;
	uint8_t chip_metal;
	uint8_t chip_bond_id;
	uint8_t chip_platform_type;
	#define VER_GET_RESP_CHIP_PLATFORM_TYPE_ASIC		   (0x0UL << 0)
	#define VER_GET_RESP_CHIP_PLATFORM_TYPE_FPGA		   (0x1UL << 0)
	#define VER_GET_RESP_CHIP_PLATFORM_TYPE_PALLADIUM	   (0x2UL << 0)
	uint16_t max_req_win_len;
	uint16_t max_resp_len;
	uint16_t def_req_timeout;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_func_reset */
/* Input (24 bytes) */
struct hwrm_func_reset_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t enables;
	#define FUNC_RESET_REQ_ENABLES_VF_ID_VALID		    0x1UL
	uint16_t vf_id;
	uint8_t func_reset_level;
	#define FUNC_RESET_REQ_FUNC_RESET_LEVEL_RESETALL	   (0x0UL << 0)
	#define FUNC_RESET_REQ_FUNC_RESET_LEVEL_RESETME	   (0x1UL << 0)
	#define FUNC_RESET_REQ_FUNC_RESET_LEVEL_RESETCHILDREN     (0x2UL << 0)
	#define FUNC_RESET_REQ_FUNC_RESET_LEVEL_RESETVF	   (0x3UL << 0)
	uint8_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_func_reset_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_func_getfid */
/* Input (24 bytes) */
struct hwrm_func_getfid_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t enables;
	#define FUNC_GETFID_REQ_ENABLES_PCI_ID			    0x1UL
	uint16_t pci_id;
	uint16_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_func_getfid_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t fid;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t unused_4;
	uint8_t valid;
};

/* hwrm_func_vf_alloc */
/* Input (24 bytes) */
struct hwrm_func_vf_alloc_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t enables;
	#define FUNC_VF_ALLOC_REQ_ENABLES_FIRST_VF_ID		    0x1UL
	uint16_t first_vf_id;
	uint16_t num_vfs;
};

/* Output (16 bytes) */
struct hwrm_func_vf_alloc_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t first_vf_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t unused_4;
	uint8_t valid;
};

/* hwrm_func_vf_free */
/* Input (24 bytes) */
struct hwrm_func_vf_free_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t enables;
	#define FUNC_VF_FREE_REQ_ENABLES_FIRST_VF_ID		    0x1UL
	uint16_t first_vf_id;
	uint16_t num_vfs;
};

/* Output (16 bytes) */
struct hwrm_func_vf_free_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_func_vf_cfg */
/* Input (32 bytes) */
struct hwrm_func_vf_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t enables;
	#define FUNC_VF_CFG_REQ_ENABLES_MTU			    0x1UL
	#define FUNC_VF_CFG_REQ_ENABLES_GUEST_VLAN		    0x2UL
	#define FUNC_VF_CFG_REQ_ENABLES_ASYNC_EVENT_CR		    0x4UL
	uint16_t mtu;
	uint16_t guest_vlan;
	uint16_t async_event_cr;
	uint16_t unused_0[3];
};

/* Output (16 bytes) */
struct hwrm_func_vf_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_func_qcaps */
/* Input (24 bytes) */
struct hwrm_func_qcaps_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t fid;
	uint16_t unused_0[3];
};

/* Output (80 bytes) */
struct hwrm_func_qcaps_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t fid;
	uint16_t port_id;
	uint32_t flags;
	#define FUNC_QCAPS_RESP_FLAGS_PUSH_MODE_SUPPORTED	    0x1UL
	#define FUNC_QCAPS_RESP_FLAGS_GLOBAL_MSIX_AUTOMASKING      0x2UL
	#define FUNC_QCAPS_RESP_FLAGS_PTP_SUPPORTED		    0x4UL
	uint8_t mac_address[6];
	uint16_t max_rsscos_ctx;
	uint16_t max_cmpl_rings;
	uint16_t max_tx_rings;
	uint16_t max_rx_rings;
	uint16_t max_l2_ctxs;
	uint16_t max_vnics;
	uint16_t first_vf_id;
	uint16_t max_vfs;
	uint16_t max_stat_ctx;
	uint32_t max_encap_records;
	uint32_t max_decap_records;
	uint32_t max_tx_em_flows;
	uint32_t max_tx_wm_flows;
	uint32_t max_rx_em_flows;
	uint32_t max_rx_wm_flows;
	uint32_t max_mcast_filters;
	uint32_t max_flow_id;
	uint32_t max_hw_ring_grps;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_func_qcfg */
/* Input (24 bytes) */
struct hwrm_func_qcfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t fid;
	uint16_t unused_0[3];
};

/* Output (72 bytes) */
struct hwrm_func_qcfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t fid;
	uint16_t port_id;
	uint16_t vlan;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t mac_address[6];
	uint16_t pci_id;
	uint16_t alloc_rsscos_ctx;
	uint16_t alloc_cmpl_rings;
	uint16_t alloc_tx_rings;
	uint16_t alloc_rx_rings;
	uint16_t alloc_l2_ctx;
	uint16_t alloc_vnics;
	uint16_t mtu;
	uint16_t mru;
	uint16_t stat_ctx_id;
	uint8_t port_partition_type;
	#define FUNC_QCFG_RESP_PORT_PARTITION_TYPE_SPF		   (0x0UL << 0)
	#define FUNC_QCFG_RESP_PORT_PARTITION_TYPE_MPFS	   (0x1UL << 0)
	#define FUNC_QCFG_RESP_PORT_PARTITION_TYPE_NPAR1_0	   (0x2UL << 0)
	#define FUNC_QCFG_RESP_PORT_PARTITION_TYPE_NPAR1_5	   (0x3UL << 0)
	#define FUNC_QCFG_RESP_PORT_PARTITION_TYPE_NPAR2_0	   (0x4UL << 0)
	#define FUNC_QCFG_RESP_PORT_PARTITION_TYPE_UNKNOWN	   (0xffUL << 0)
	uint8_t unused_2;
	uint16_t dflt_vnic_id;
	uint8_t unused_3;
	uint8_t unused_4;
	uint32_t min_bw;
	uint32_t max_bw;
	uint8_t evb_mode;
	#define FUNC_QCFG_RESP_EVB_MODE_NO_EVB			   (0x0UL << 0)
	#define FUNC_QCFG_RESP_EVB_MODE_VEB			   (0x1UL << 0)
	#define FUNC_QCFG_RESP_EVB_MODE_VEPA			   (0x2UL << 0)
	uint8_t unused_5;
	uint16_t unused_6;
	uint32_t alloc_mcast_filters;
	uint32_t alloc_hw_ring_grps;
	uint8_t unused_7;
	uint8_t unused_8;
	uint8_t unused_9;
	uint8_t valid;
};

/* hwrm_func_cfg */
/* Input (88 bytes) */
struct hwrm_func_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t fid;
	uint8_t unused_0;
	uint8_t unused_1;
	uint32_t flags;
	#define FUNC_CFG_REQ_FLAGS_PROM_MODE			    0x1UL
	#define FUNC_CFG_REQ_FLAGS_SRC_MAC_ADDR_CHECK		    0x2UL
	#define FUNC_CFG_REQ_FLAGS_SRC_IP_ADDR_CHECK		    0x4UL
	#define FUNC_CFG_REQ_FLAGS_VLAN_PRI_MATCH		    0x8UL
	#define FUNC_CFG_REQ_FLAGS_DFLT_PRI_NOMATCH		    0x10UL
	#define FUNC_CFG_REQ_FLAGS_DISABLE_PAUSE		    0x20UL
	#define FUNC_CFG_REQ_FLAGS_DISABLE_STP			    0x40UL
	#define FUNC_CFG_REQ_FLAGS_DISABLE_LLDP		    0x80UL
	#define FUNC_CFG_REQ_FLAGS_DISABLE_PTPV2		    0x100UL
	uint32_t enables;
	#define FUNC_CFG_REQ_ENABLES_MTU			    0x1UL
	#define FUNC_CFG_REQ_ENABLES_MRU			    0x2UL
	#define FUNC_CFG_REQ_ENABLES_NUM_RSSCOS_CTXS		    0x4UL
	#define FUNC_CFG_REQ_ENABLES_NUM_CMPL_RINGS		    0x8UL
	#define FUNC_CFG_REQ_ENABLES_NUM_TX_RINGS		    0x10UL
	#define FUNC_CFG_REQ_ENABLES_NUM_RX_RINGS		    0x20UL
	#define FUNC_CFG_REQ_ENABLES_NUM_L2_CTXS		    0x40UL
	#define FUNC_CFG_REQ_ENABLES_NUM_VNICS			    0x80UL
	#define FUNC_CFG_REQ_ENABLES_NUM_STAT_CTXS		    0x100UL
	#define FUNC_CFG_REQ_ENABLES_DFLT_MAC_ADDR		    0x200UL
	#define FUNC_CFG_REQ_ENABLES_DFLT_VLAN			    0x400UL
	#define FUNC_CFG_REQ_ENABLES_DFLT_IP_ADDR		    0x800UL
	#define FUNC_CFG_REQ_ENABLES_MIN_BW			    0x1000UL
	#define FUNC_CFG_REQ_ENABLES_MAX_BW			    0x2000UL
	#define FUNC_CFG_REQ_ENABLES_ASYNC_EVENT_CR		    0x4000UL
	#define FUNC_CFG_REQ_ENABLES_VLAN_ANTISPOOF_MODE	    0x8000UL
	#define FUNC_CFG_REQ_ENABLES_ALLOWED_VLAN_PRIS		    0x10000UL
	#define FUNC_CFG_REQ_ENABLES_EVB_MODE			    0x20000UL
	#define FUNC_CFG_REQ_ENABLES_NUM_MCAST_FILTERS		    0x40000UL
	#define FUNC_CFG_REQ_ENABLES_NUM_HW_RING_GRPS		    0x80000UL
	uint16_t mtu;
	uint16_t mru;
	uint16_t num_rsscos_ctxs;
	uint16_t num_cmpl_rings;
	uint16_t num_tx_rings;
	uint16_t num_rx_rings;
	uint16_t num_l2_ctxs;
	uint16_t num_vnics;
	uint16_t num_stat_ctxs;
	uint16_t num_hw_ring_grps;
	uint8_t dflt_mac_addr[6];
	uint16_t dflt_vlan;
	uint32_t dflt_ip_addr[4];
	uint32_t min_bw;
	uint32_t max_bw;
	uint16_t async_event_cr;
	uint8_t vlan_antispoof_mode;
	#define FUNC_CFG_REQ_VLAN_ANTISPOOF_MODE_NOCHECK	   (0x0UL << 0)
	#define FUNC_CFG_REQ_VLAN_ANTISPOOF_MODE_VALIDATE_VLAN    (0x1UL << 0)
	#define FUNC_CFG_REQ_VLAN_ANTISPOOF_MODE_INSERT_IF_VLANDNE (0x2UL << 0)
	#define FUNC_CFG_REQ_VLAN_ANTISPOOF_MODE_INSERT_OR_OVERRIDE_VLAN (0x3UL << 0)
	uint8_t allowed_vlan_pris;
	uint8_t evb_mode;
	#define FUNC_CFG_REQ_EVB_MODE_NO_EVB			   (0x0UL << 0)
	#define FUNC_CFG_REQ_EVB_MODE_VEB			   (0x1UL << 0)
	#define FUNC_CFG_REQ_EVB_MODE_VEPA			   (0x2UL << 0)
	uint8_t unused_2;
	uint16_t num_mcast_filters;
};

/* Output (16 bytes) */
struct hwrm_func_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_func_qstats */
/* Input (24 bytes) */
struct hwrm_func_qstats_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t fid;
	uint16_t unused_0[3];
};

/* Output (176 bytes) */
struct hwrm_func_qstats_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint64_t tx_ucast_pkts;
	uint64_t tx_mcast_pkts;
	uint64_t tx_bcast_pkts;
	uint64_t tx_err_pkts;
	uint64_t tx_drop_pkts;
	uint64_t tx_ucast_bytes;
	uint64_t tx_mcast_bytes;
	uint64_t tx_bcast_bytes;
	uint64_t rx_ucast_pkts;
	uint64_t rx_mcast_pkts;
	uint64_t rx_bcast_pkts;
	uint64_t rx_err_pkts;
	uint64_t rx_drop_pkts;
	uint64_t rx_ucast_bytes;
	uint64_t rx_mcast_bytes;
	uint64_t rx_bcast_bytes;
	uint64_t rx_agg_pkts;
	uint64_t rx_agg_bytes;
	uint64_t rx_agg_events;
	uint64_t rx_agg_aborts;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_func_clr_stats */
/* Input (24 bytes) */
struct hwrm_func_clr_stats_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t fid;
	uint16_t unused_0[3];
};

/* Output (16 bytes) */
struct hwrm_func_clr_stats_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_func_vf_resc_free */
/* Input (24 bytes) */
struct hwrm_func_vf_resc_free_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t vf_id;
	uint16_t unused_0[3];
};

/* Output (16 bytes) */
struct hwrm_func_vf_resc_free_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_func_vf_vnic_ids_query */
/* Input (32 bytes) */
struct hwrm_func_vf_vnic_ids_query_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t vf_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint32_t max_vnic_id_cnt;
	uint64_t vnic_id_tbl_addr;
};

/* Output (16 bytes) */
struct hwrm_func_vf_vnic_ids_query_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t vnic_id_cnt;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_func_drv_rgtr */
/* Input (80 bytes) */
struct hwrm_func_drv_rgtr_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define FUNC_DRV_RGTR_REQ_FLAGS_FWD_ALL_MODE		    0x1UL
	#define FUNC_DRV_RGTR_REQ_FLAGS_FWD_NONE_MODE		    0x2UL
	uint32_t enables;
	#define FUNC_DRV_RGTR_REQ_ENABLES_OS_TYPE		    0x1UL
	#define FUNC_DRV_RGTR_REQ_ENABLES_VER			    0x2UL
	#define FUNC_DRV_RGTR_REQ_ENABLES_TIMESTAMP		    0x4UL
	#define FUNC_DRV_RGTR_REQ_ENABLES_VF_REQ_FWD		    0x8UL
	#define FUNC_DRV_RGTR_REQ_ENABLES_ASYNC_EVENT_FWD	    0x10UL
	uint16_t os_type;
	#define FUNC_DRV_RGTR_REQ_OS_TYPE_UNKNOWN		   (0x0UL << 0)
	#define FUNC_DRV_RGTR_REQ_OS_TYPE_OTHER		   (0x1UL << 0)
	#define FUNC_DRV_RGTR_REQ_OS_TYPE_MSDOS		   (0xeUL << 0)
	#define FUNC_DRV_RGTR_REQ_OS_TYPE_WINDOWS		   (0x12UL << 0)
	#define FUNC_DRV_RGTR_REQ_OS_TYPE_SOLARIS		   (0x1dUL << 0)
	#define FUNC_DRV_RGTR_REQ_OS_TYPE_LINUX		   (0x24UL << 0)
	#define FUNC_DRV_RGTR_REQ_OS_TYPE_FREEBSD		   (0x2aUL << 0)
	#define FUNC_DRV_RGTR_REQ_OS_TYPE_ESXI			   (0x68UL << 0)
	#define FUNC_DRV_RGTR_REQ_OS_TYPE_WIN864		   (0x73UL << 0)
	#define FUNC_DRV_RGTR_REQ_OS_TYPE_WIN2012R2		   (0x74UL << 0)
	uint8_t ver_maj;
	uint8_t ver_min;
	uint8_t ver_upd;
	uint8_t unused_0;
	uint16_t unused_1;
	uint32_t timestamp;
	uint32_t unused_2;
	uint32_t vf_req_fwd[8];
	uint32_t async_event_fwd[8];
};

/* Output (16 bytes) */
struct hwrm_func_drv_rgtr_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_func_drv_unrgtr */
/* Input (24 bytes) */
struct hwrm_func_drv_unrgtr_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define FUNC_DRV_UNRGTR_REQ_FLAGS_PREPARE_FOR_SHUTDOWN     0x1UL
	uint32_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_func_drv_unrgtr_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_func_buf_rgtr */
/* Input (128 bytes) */
struct hwrm_func_buf_rgtr_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t enables;
	#define FUNC_BUF_RGTR_REQ_ENABLES_VF_ID		    0x1UL
	#define FUNC_BUF_RGTR_REQ_ENABLES_ERR_BUF_ADDR		    0x2UL
	uint16_t vf_id;
	uint16_t req_buf_num_pages;
	uint16_t req_buf_page_size;
	#define FUNC_BUF_RGTR_REQ_REQ_BUF_PAGE_SIZE_16B	   (0x4UL << 0)
	#define FUNC_BUF_RGTR_REQ_REQ_BUF_PAGE_SIZE_4K		   (0xcUL << 0)
	#define FUNC_BUF_RGTR_REQ_REQ_BUF_PAGE_SIZE_8K		   (0xdUL << 0)
	#define FUNC_BUF_RGTR_REQ_REQ_BUF_PAGE_SIZE_64K	   (0x10UL << 0)
	#define FUNC_BUF_RGTR_REQ_REQ_BUF_PAGE_SIZE_2M		   (0x16UL << 0)
	#define FUNC_BUF_RGTR_REQ_REQ_BUF_PAGE_SIZE_4M		   (0x17UL << 0)
	#define FUNC_BUF_RGTR_REQ_REQ_BUF_PAGE_SIZE_1G		   (0x1eUL << 0)
	uint16_t req_buf_len;
	uint16_t resp_buf_len;
	uint8_t unused_0;
	uint8_t unused_1;
	uint64_t req_buf_page_addr0;
	uint64_t req_buf_page_addr1;
	uint64_t req_buf_page_addr2;
	uint64_t req_buf_page_addr3;
	uint64_t req_buf_page_addr4;
	uint64_t req_buf_page_addr5;
	uint64_t req_buf_page_addr6;
	uint64_t req_buf_page_addr7;
	uint64_t req_buf_page_addr8;
	uint64_t req_buf_page_addr9;
	uint64_t error_buf_addr;
	uint64_t resp_buf_addr;
};

/* Output (16 bytes) */
struct hwrm_func_buf_rgtr_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_func_buf_unrgtr */
/* Input (24 bytes) */
struct hwrm_func_buf_unrgtr_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t enables;
	#define FUNC_BUF_UNRGTR_REQ_ENABLES_VF_ID		    0x1UL
	uint16_t vf_id;
	uint16_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_func_buf_unrgtr_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_func_drv_qver */
/* Input (24 bytes) */
struct hwrm_func_drv_qver_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t reserved;
	uint16_t fid;
	uint16_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_func_drv_qver_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t os_type;
	#define FUNC_DRV_QVER_RESP_OS_TYPE_UNKNOWN		   (0x0UL << 0)
	#define FUNC_DRV_QVER_RESP_OS_TYPE_OTHER		   (0x1UL << 0)
	#define FUNC_DRV_QVER_RESP_OS_TYPE_MSDOS		   (0xeUL << 0)
	#define FUNC_DRV_QVER_RESP_OS_TYPE_WINDOWS		   (0x12UL << 0)
	#define FUNC_DRV_QVER_RESP_OS_TYPE_SOLARIS		   (0x1dUL << 0)
	#define FUNC_DRV_QVER_RESP_OS_TYPE_LINUX		   (0x24UL << 0)
	#define FUNC_DRV_QVER_RESP_OS_TYPE_FREEBSD		   (0x2aUL << 0)
	#define FUNC_DRV_QVER_RESP_OS_TYPE_ESXI		   (0x68UL << 0)
	#define FUNC_DRV_QVER_RESP_OS_TYPE_WIN864		   (0x73UL << 0)
	#define FUNC_DRV_QVER_RESP_OS_TYPE_WIN2012R2		   (0x74UL << 0)
	uint8_t ver_maj;
	uint8_t ver_min;
	uint8_t ver_upd;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t valid;
};

/* hwrm_port_phy_cfg */
/* Input (56 bytes) */
struct hwrm_port_phy_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define PORT_PHY_CFG_REQ_FLAGS_RESET_PHY		    0x1UL
	#define PORT_PHY_CFG_REQ_FLAGS_FORCE_LINK_DOWN		    0x2UL
	#define PORT_PHY_CFG_REQ_FLAGS_FORCE			    0x4UL
	#define PORT_PHY_CFG_REQ_FLAGS_RESTART_AUTONEG		    0x8UL
	#define PORT_PHY_CFG_REQ_FLAGS_EEE_ENABLE		    0x10UL
	#define PORT_PHY_CFG_REQ_FLAGS_EEE_DISABLE		    0x20UL
	#define PORT_PHY_CFG_REQ_FLAGS_EEE_TX_LPI_ENABLE	    0x40UL
	#define PORT_PHY_CFG_REQ_FLAGS_EEE_TX_LPI_DISABLE	    0x80UL
	uint32_t enables;
	#define PORT_PHY_CFG_REQ_ENABLES_AUTO_MODE		    0x1UL
	#define PORT_PHY_CFG_REQ_ENABLES_AUTO_DUPLEX		    0x2UL
	#define PORT_PHY_CFG_REQ_ENABLES_AUTO_PAUSE		    0x4UL
	#define PORT_PHY_CFG_REQ_ENABLES_AUTO_LINK_SPEED	    0x8UL
	#define PORT_PHY_CFG_REQ_ENABLES_AUTO_LINK_SPEED_MASK      0x10UL
	#define PORT_PHY_CFG_REQ_ENABLES_WIRESPEED		    0x20UL
	#define PORT_PHY_CFG_REQ_ENABLES_LPBK			    0x40UL
	#define PORT_PHY_CFG_REQ_ENABLES_PREEMPHASIS		    0x80UL
	#define PORT_PHY_CFG_REQ_ENABLES_FORCE_PAUSE		    0x100UL
	#define PORT_PHY_CFG_REQ_ENABLES_EEE_LINK_SPEED_MASK       0x200UL
	#define PORT_PHY_CFG_REQ_ENABLES_TX_LPI_TIMER		    0x400UL
	uint16_t port_id;
	uint16_t force_link_speed;
	#define PORT_PHY_CFG_REQ_FORCE_LINK_SPEED_100MB	   (0x1UL << 0)
	#define PORT_PHY_CFG_REQ_FORCE_LINK_SPEED_1GB		   (0xaUL << 0)
	#define PORT_PHY_CFG_REQ_FORCE_LINK_SPEED_2GB		   (0x14UL << 0)
	#define PORT_PHY_CFG_REQ_FORCE_LINK_SPEED_2_5GB	   (0x19UL << 0)
	#define PORT_PHY_CFG_REQ_FORCE_LINK_SPEED_10GB		   (0x64UL << 0)
	#define PORT_PHY_CFG_REQ_FORCE_LINK_SPEED_20GB		   (0xc8UL << 0)
	#define PORT_PHY_CFG_REQ_FORCE_LINK_SPEED_25GB		   (0xfaUL << 0)
	#define PORT_PHY_CFG_REQ_FORCE_LINK_SPEED_40GB		   (0x190UL << 0)
	#define PORT_PHY_CFG_REQ_FORCE_LINK_SPEED_50GB		   (0x1f4UL << 0)
	#define PORT_PHY_CFG_REQ_FORCE_LINK_SPEED_100GB	   (0x3e8UL << 0)
	#define PORT_PHY_CFG_REQ_FORCE_LINK_SPEED_10MB		   (0xffffUL << 0)
	uint8_t auto_mode;
	#define PORT_PHY_CFG_REQ_AUTO_MODE_NONE		   (0x0UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_MODE_ALL_SPEEDS		   (0x1UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_MODE_ONE_SPEED		   (0x2UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_MODE_ONE_OR_BELOW	   (0x3UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_MODE_SPEED_MASK		   (0x4UL << 0)
	uint8_t auto_duplex;
	#define PORT_PHY_CFG_REQ_AUTO_DUPLEX_HALF		   (0x0UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_DUPLEX_FULL		   (0x1UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_DUPLEX_BOTH		   (0x2UL << 0)
	uint8_t auto_pause;
	#define PORT_PHY_CFG_REQ_AUTO_PAUSE_TX			    0x1UL
	#define PORT_PHY_CFG_REQ_AUTO_PAUSE_RX			    0x2UL
	#define PORT_PHY_CFG_REQ_AUTO_PAUSE_AUTONEG_PAUSE	    0x4UL
	uint8_t unused_0;
	uint16_t auto_link_speed;
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_100MB		   (0x1UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_1GB		   (0xaUL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_2GB		   (0x14UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_2_5GB		   (0x19UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_10GB		   (0x64UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_20GB		   (0xc8UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_25GB		   (0xfaUL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_40GB		   (0x190UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_50GB		   (0x1f4UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_100GB		   (0x3e8UL << 0)
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_10MB		   (0xffffUL << 0)
	uint16_t auto_link_speed_mask;
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_100MBHD      0x1UL
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_100MB	    0x2UL
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_1GBHD	    0x4UL
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_1GB	    0x8UL
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_2GB	    0x10UL
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_2_5GB	    0x20UL
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_10GB	    0x40UL
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_20GB	    0x80UL
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_25GB	    0x100UL
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_40GB	    0x200UL
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_50GB	    0x400UL
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_100GB	    0x800UL
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_10MBHD       0x1000UL
	#define PORT_PHY_CFG_REQ_AUTO_LINK_SPEED_MASK_10MB	    0x2000UL
	uint8_t wirespeed;
	#define PORT_PHY_CFG_REQ_WIRESPEED_OFF			   (0x0UL << 0)
	#define PORT_PHY_CFG_REQ_WIRESPEED_ON			   (0x1UL << 0)
	uint8_t lpbk;
	#define PORT_PHY_CFG_REQ_LPBK_NONE			   (0x0UL << 0)
	#define PORT_PHY_CFG_REQ_LPBK_LOCAL			   (0x1UL << 0)
	#define PORT_PHY_CFG_REQ_LPBK_REMOTE			   (0x2UL << 0)
	uint8_t force_pause;
	#define PORT_PHY_CFG_REQ_FORCE_PAUSE_TX		    0x1UL
	#define PORT_PHY_CFG_REQ_FORCE_PAUSE_RX		    0x2UL
	uint8_t unused_1;
	uint32_t preemphasis;
	uint16_t eee_link_speed_mask;
	#define PORT_PHY_CFG_REQ_EEE_LINK_SPEED_MASK_RSVD1	    0x1UL
	#define PORT_PHY_CFG_REQ_EEE_LINK_SPEED_MASK_100MB	    0x2UL
	#define PORT_PHY_CFG_REQ_EEE_LINK_SPEED_MASK_RSVD2	    0x4UL
	#define PORT_PHY_CFG_REQ_EEE_LINK_SPEED_MASK_1GB	    0x8UL
	#define PORT_PHY_CFG_REQ_EEE_LINK_SPEED_MASK_RSVD3	    0x10UL
	#define PORT_PHY_CFG_REQ_EEE_LINK_SPEED_MASK_RSVD4	    0x20UL
	#define PORT_PHY_CFG_REQ_EEE_LINK_SPEED_MASK_10GB	    0x40UL
	uint8_t unused_2;
	uint8_t unused_3;
	uint32_t tx_lpi_timer;
	uint32_t unused_4;
	#define PORT_PHY_CFG_REQ_TX_LPI_TIMER_MASK		    0xffffffUL
	#define PORT_PHY_CFG_REQ_TX_LPI_TIMER_SFT		    0
};

/* Output (16 bytes) */
struct hwrm_port_phy_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_port_phy_qcfg */
/* Input (24 bytes) */
struct hwrm_port_phy_qcfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t port_id;
	uint16_t unused_0[3];
};

/* Output (96 bytes) */
struct hwrm_port_phy_qcfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint8_t link;
	#define PORT_PHY_QCFG_RESP_LINK_NO_LINK		   (0x0UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_SIGNAL			   (0x1UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_LINK			   (0x2UL << 0)
	uint8_t unused_0;
	uint16_t link_speed;
	#define PORT_PHY_QCFG_RESP_LINK_SPEED_100MB		   (0x1UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_SPEED_1GB		   (0xaUL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_SPEED_2GB		   (0x14UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_SPEED_2_5GB		   (0x19UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_SPEED_10GB		   (0x64UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_SPEED_20GB		   (0xc8UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_SPEED_25GB		   (0xfaUL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_SPEED_40GB		   (0x190UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_SPEED_50GB		   (0x1f4UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_SPEED_100GB		   (0x3e8UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_SPEED_10MB		   (0xffffUL << 0)
	uint8_t duplex;
	#define PORT_PHY_QCFG_RESP_DUPLEX_HALF			   (0x0UL << 0)
	#define PORT_PHY_QCFG_RESP_DUPLEX_FULL			   (0x1UL << 0)
	uint8_t pause;
	#define PORT_PHY_QCFG_RESP_PAUSE_TX			    0x1UL
	#define PORT_PHY_QCFG_RESP_PAUSE_RX			    0x2UL
	uint16_t support_speeds;
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_100MBHD	    0x1UL
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_100MB	    0x2UL
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_1GBHD	    0x4UL
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_1GB		    0x8UL
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_2GB		    0x10UL
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_2_5GB	    0x20UL
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_10GB		    0x40UL
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_20GB		    0x80UL
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_25GB		    0x100UL
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_40GB		    0x200UL
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_50GB		    0x400UL
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_100GB	    0x800UL
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_10MBHD	    0x1000UL
	#define PORT_PHY_QCFG_RESP_SUPPORT_SPEEDS_10MB		    0x2000UL
	uint16_t force_link_speed;
	#define PORT_PHY_QCFG_RESP_FORCE_LINK_SPEED_100MB	   (0x1UL << 0)
	#define PORT_PHY_QCFG_RESP_FORCE_LINK_SPEED_1GB	   (0xaUL << 0)
	#define PORT_PHY_QCFG_RESP_FORCE_LINK_SPEED_2GB	   (0x14UL << 0)
	#define PORT_PHY_QCFG_RESP_FORCE_LINK_SPEED_2_5GB	   (0x19UL << 0)
	#define PORT_PHY_QCFG_RESP_FORCE_LINK_SPEED_10GB	   (0x64UL << 0)
	#define PORT_PHY_QCFG_RESP_FORCE_LINK_SPEED_20GB	   (0xc8UL << 0)
	#define PORT_PHY_QCFG_RESP_FORCE_LINK_SPEED_25GB	   (0xfaUL << 0)
	#define PORT_PHY_QCFG_RESP_FORCE_LINK_SPEED_40GB	   (0x190UL << 0)
	#define PORT_PHY_QCFG_RESP_FORCE_LINK_SPEED_50GB	   (0x1f4UL << 0)
	#define PORT_PHY_QCFG_RESP_FORCE_LINK_SPEED_100GB	   (0x3e8UL << 0)
	#define PORT_PHY_QCFG_RESP_FORCE_LINK_SPEED_10MB	   (0xffffUL << 0)
	uint8_t auto_mode;
	#define PORT_PHY_QCFG_RESP_AUTO_MODE_NONE		   (0x0UL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_MODE_ALL_SPEEDS	   (0x1UL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_MODE_ONE_SPEED		   (0x2UL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_MODE_ONE_OR_BELOW	   (0x3UL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_MODE_SPEED_MASK	   (0x4UL << 0)
	uint8_t auto_pause;
	#define PORT_PHY_QCFG_RESP_AUTO_PAUSE_TX		    0x1UL
	#define PORT_PHY_QCFG_RESP_AUTO_PAUSE_RX		    0x2UL
	#define PORT_PHY_QCFG_RESP_AUTO_PAUSE_AUTONEG_PAUSE	    0x4UL
	uint16_t auto_link_speed;
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_100MB	   (0x1UL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_1GB		   (0xaUL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_2GB		   (0x14UL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_2_5GB	   (0x19UL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_10GB	   (0x64UL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_20GB	   (0xc8UL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_25GB	   (0xfaUL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_40GB	   (0x190UL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_50GB	   (0x1f4UL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_100GB	   (0x3e8UL << 0)
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_10MB	   (0xffffUL << 0)
	uint16_t auto_link_speed_mask;
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_100MBHD    0x1UL
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_100MB      0x2UL
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_1GBHD      0x4UL
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_1GB	    0x8UL
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_2GB	    0x10UL
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_2_5GB      0x20UL
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_10GB       0x40UL
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_20GB       0x80UL
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_25GB       0x100UL
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_40GB       0x200UL
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_50GB       0x400UL
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_100GB      0x800UL
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_10MBHD     0x1000UL
	#define PORT_PHY_QCFG_RESP_AUTO_LINK_SPEED_MASK_10MB       0x2000UL
	uint8_t wirespeed;
	#define PORT_PHY_QCFG_RESP_WIRESPEED_OFF		   (0x0UL << 0)
	#define PORT_PHY_QCFG_RESP_WIRESPEED_ON		   (0x1UL << 0)
	uint8_t lpbk;
	#define PORT_PHY_QCFG_RESP_LPBK_NONE			   (0x0UL << 0)
	#define PORT_PHY_QCFG_RESP_LPBK_LOCAL			   (0x1UL << 0)
	#define PORT_PHY_QCFG_RESP_LPBK_REMOTE			   (0x2UL << 0)
	uint8_t force_pause;
	#define PORT_PHY_QCFG_RESP_FORCE_PAUSE_TX		    0x1UL
	#define PORT_PHY_QCFG_RESP_FORCE_PAUSE_RX		    0x2UL
	uint8_t module_status;
	#define PORT_PHY_QCFG_RESP_MODULE_STATUS_NONE		   (0x0UL << 0)
	#define PORT_PHY_QCFG_RESP_MODULE_STATUS_DISABLETX	   (0x1UL << 0)
	#define PORT_PHY_QCFG_RESP_MODULE_STATUS_WARNINGMSG       (0x2UL << 0)
	#define PORT_PHY_QCFG_RESP_MODULE_STATUS_PWRDOWN	   (0x3UL << 0)
	#define PORT_PHY_QCFG_RESP_MODULE_STATUS_NOTINSERTED      (0x4UL << 0)
	#define PORT_PHY_QCFG_RESP_MODULE_STATUS_NOTAPPLICABLE    (0xffUL << 0)
	uint32_t preemphasis;
	uint8_t phy_maj;
	uint8_t phy_min;
	uint8_t phy_bld;
	uint8_t phy_type;
	#define PORT_PHY_QCFG_RESP_PHY_TYPE_UNKNOWN		   (0x0UL << 0)
	#define PORT_PHY_QCFG_RESP_PHY_TYPE_BASECR		   (0x1UL << 0)
	#define PORT_PHY_QCFG_RESP_PHY_TYPE_BASEKR4		   (0x2UL << 0)
	#define PORT_PHY_QCFG_RESP_PHY_TYPE_BASELR		   (0x3UL << 0)
	#define PORT_PHY_QCFG_RESP_PHY_TYPE_BASESR		   (0x4UL << 0)
	#define PORT_PHY_QCFG_RESP_PHY_TYPE_BASEKR2		   (0x5UL << 0)
	#define PORT_PHY_QCFG_RESP_PHY_TYPE_BASEKX		   (0x6UL << 0)
	#define PORT_PHY_QCFG_RESP_PHY_TYPE_BASEKR		   (0x7UL << 0)
	#define PORT_PHY_QCFG_RESP_PHY_TYPE_BASET		   (0x8UL << 0)
	#define PORT_PHY_QCFG_RESP_PHY_TYPE_BASETE		   (0x9UL << 0)
	#define PORT_PHY_QCFG_RESP_PHY_TYPE_SGMIIEXTPHY	   (0xaUL << 0)
	uint8_t media_type;
	#define PORT_PHY_QCFG_RESP_MEDIA_TYPE_UNKNOWN		   (0x0UL << 0)
	#define PORT_PHY_QCFG_RESP_MEDIA_TYPE_TP		   (0x1UL << 0)
	#define PORT_PHY_QCFG_RESP_MEDIA_TYPE_DAC		   (0x2UL << 0)
	#define PORT_PHY_QCFG_RESP_MEDIA_TYPE_FIBRE		   (0x3UL << 0)
	uint8_t xcvr_pkg_type;
	#define PORT_PHY_QCFG_RESP_XCVR_PKG_TYPE_XCVR_INTERNAL    (0x1UL << 0)
	#define PORT_PHY_QCFG_RESP_XCVR_PKG_TYPE_XCVR_EXTERNAL    (0x2UL << 0)
	uint8_t eee_config_phy_addr;
	#define PORT_PHY_QCFG_RESP_PHY_ADDR_MASK		    0x1fUL
	#define PORT_PHY_QCFG_RESP_PHY_ADDR_SFT		    0
	#define PORT_PHY_QCFG_RESP_EEE_CONFIG_EEE_ENABLED	    0x20UL
	#define PORT_PHY_QCFG_RESP_EEE_CONFIG_EEE_ACTIVE	    0x40UL
	#define PORT_PHY_QCFG_RESP_EEE_CONFIG_EEE_TX_LPI	    0x80UL
	#define PORT_PHY_QCFG_RESP_EEE_CONFIG_MASK		    0xe0UL
	#define PORT_PHY_QCFG_RESP_EEE_CONFIG_SFT		    5
	uint8_t parallel_detect;
	#define PORT_PHY_QCFG_RESP_PARALLEL_DETECT		    0x1UL
	#define PORT_PHY_QCFG_RESP_RESERVED_MASK		    0xfeUL
	#define PORT_PHY_QCFG_RESP_RESERVED_SFT		    1
	uint16_t link_partner_adv_speeds;
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_100MBHD 0x1UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_100MB   0x2UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_1GBHD   0x4UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_1GB     0x8UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_2GB     0x10UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_2_5GB   0x20UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_10GB    0x40UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_20GB    0x80UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_25GB    0x100UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_40GB    0x200UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_50GB    0x400UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_100GB   0x800UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_10MBHD  0x1000UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_SPEEDS_10MB    0x2000UL
	uint8_t link_partner_adv_auto_mode;
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_AUTO_MODE_NONE (0x0UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_AUTO_MODE_ALL_SPEEDS (0x1UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_AUTO_MODE_ONE_SPEED (0x2UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_AUTO_MODE_ONE_OR_BELOW (0x3UL << 0)
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_AUTO_MODE_SPEED_MASK (0x4UL << 0)
	uint8_t link_partner_adv_pause;
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_PAUSE_TX       0x1UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_PAUSE_RX       0x2UL
	uint16_t adv_eee_link_speed_mask;
	#define PORT_PHY_QCFG_RESP_ADV_EEE_LINK_SPEED_MASK_RSVD1   0x1UL
	#define PORT_PHY_QCFG_RESP_ADV_EEE_LINK_SPEED_MASK_100MB   0x2UL
	#define PORT_PHY_QCFG_RESP_ADV_EEE_LINK_SPEED_MASK_RSVD2   0x4UL
	#define PORT_PHY_QCFG_RESP_ADV_EEE_LINK_SPEED_MASK_1GB     0x8UL
	#define PORT_PHY_QCFG_RESP_ADV_EEE_LINK_SPEED_MASK_RSVD3   0x10UL
	#define PORT_PHY_QCFG_RESP_ADV_EEE_LINK_SPEED_MASK_RSVD4   0x20UL
	#define PORT_PHY_QCFG_RESP_ADV_EEE_LINK_SPEED_MASK_10GB    0x40UL
	uint16_t link_partner_adv_eee_link_speed_mask;
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_EEE_LINK_SPEED_MASK_RSVD1 0x1UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_EEE_LINK_SPEED_MASK_100MB 0x2UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_EEE_LINK_SPEED_MASK_RSVD2 0x4UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_EEE_LINK_SPEED_MASK_1GB 0x8UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_EEE_LINK_SPEED_MASK_RSVD3 0x10UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_EEE_LINK_SPEED_MASK_RSVD4 0x20UL
	#define PORT_PHY_QCFG_RESP_LINK_PARTNER_ADV_EEE_LINK_SPEED_MASK_10GB 0x40UL
	uint32_t xcvr_identifier_type_tx_lpi_timer;
	#define PORT_PHY_QCFG_RESP_TX_LPI_TIMER_MASK		    0xffffffUL
	#define PORT_PHY_QCFG_RESP_TX_LPI_TIMER_SFT		    0
	#define PORT_PHY_QCFG_RESP_XCVR_IDENTIFIER_TYPE_MASK       0xff000000UL
	#define PORT_PHY_QCFG_RESP_XCVR_IDENTIFIER_TYPE_SFT	    24
	#define PORT_PHY_QCFG_RESP_XCVR_IDENTIFIER_TYPE_UNKNOWN   (0x0UL << 24)
	#define PORT_PHY_QCFG_RESP_XCVR_IDENTIFIER_TYPE_SFP       (0x3UL << 24)
	#define PORT_PHY_QCFG_RESP_XCVR_IDENTIFIER_TYPE_QSFP      (0xcUL << 24)
	#define PORT_PHY_QCFG_RESP_XCVR_IDENTIFIER_TYPE_QSFPPLUS  (0xdUL << 24)
	#define PORT_PHY_QCFG_RESP_XCVR_IDENTIFIER_TYPE_QSFP28    (0x11UL << 24)
	uint32_t unused_1;
	char phy_vendor_name[16];
	char phy_vendor_partnumber[16];
	uint32_t unused_2;
	uint8_t unused_3;
	uint8_t unused_4;
	uint8_t unused_5;
	uint8_t valid;
};

/* hwrm_port_mac_cfg */
/* Input (40 bytes) */
struct hwrm_port_mac_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define PORT_MAC_CFG_REQ_FLAGS_MATCH_LINK		    0x1UL
	#define PORT_MAC_CFG_REQ_FLAGS_COS_ASSIGNMENT_ENABLE       0x2UL
	#define PORT_MAC_CFG_REQ_FLAGS_TUNNEL_PRI2COS_ENABLE       0x4UL
	#define PORT_MAC_CFG_REQ_FLAGS_IP_DSCP2COS_ENABLE	    0x8UL
	#define PORT_MAC_CFG_REQ_FLAGS_PTP_RX_TS_CAPTURE_ENABLE    0x10UL
	#define PORT_MAC_CFG_REQ_FLAGS_PTP_RX_TS_CAPTURE_DISABLE   0x20UL
	#define PORT_MAC_CFG_REQ_FLAGS_PTP_TX_TS_CAPTURE_ENABLE    0x40UL
	#define PORT_MAC_CFG_REQ_FLAGS_PTP_TX_TS_CAPTURE_DISABLE   0x80UL
	uint32_t enables;
	#define PORT_MAC_CFG_REQ_ENABLES_IPG			    0x1UL
	#define PORT_MAC_CFG_REQ_ENABLES_LPBK			    0x2UL
	#define PORT_MAC_CFG_REQ_ENABLES_IVLAN_PRI2COS_MAP_PRI     0x4UL
	#define PORT_MAC_CFG_REQ_ENABLES_LCOS_MAP_PRI		    0x8UL
	#define PORT_MAC_CFG_REQ_ENABLES_TUNNEL_PRI2COS_MAP_PRI    0x10UL
	#define PORT_MAC_CFG_REQ_ENABLES_DSCP2COS_MAP_PRI	    0x20UL
	#define PORT_MAC_CFG_REQ_ENABLES_RX_TS_CAPTURE_PTP_MSG_TYPE 0x40UL
	#define PORT_MAC_CFG_REQ_ENABLES_TX_TS_CAPTURE_PTP_MSG_TYPE 0x80UL
	uint16_t port_id;
	uint8_t ipg;
	uint8_t lpbk;
	#define PORT_MAC_CFG_REQ_LPBK_NONE			   (0x0UL << 0)
	#define PORT_MAC_CFG_REQ_LPBK_LOCAL			   (0x1UL << 0)
	#define PORT_MAC_CFG_REQ_LPBK_REMOTE			   (0x2UL << 0)
	uint8_t ivlan_pri2cos_map_pri;
	uint8_t lcos_map_pri;
	uint8_t tunnel_pri2cos_map_pri;
	uint8_t dscp2pri_map_pri;
	uint16_t rx_ts_capture_ptp_msg_type;
	uint16_t tx_ts_capture_ptp_msg_type;
	uint32_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_port_mac_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t mru;
	uint16_t mtu;
	uint8_t ipg;
	uint8_t lpbk;
	#define PORT_MAC_CFG_RESP_LPBK_NONE			   (0x0UL << 0)
	#define PORT_MAC_CFG_RESP_LPBK_LOCAL			   (0x1UL << 0)
	#define PORT_MAC_CFG_RESP_LPBK_REMOTE			   (0x2UL << 0)
	uint8_t unused_0;
	uint8_t valid;
};

/* hwrm_port_mac_qcfg */
/* Input (24 bytes) */
struct hwrm_port_mac_qcfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t port_id;
	uint16_t unused_0[3];
};

/* Output (24 bytes) */
struct hwrm_port_mac_qcfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t mru;
	uint16_t mtu;
	uint8_t ipg;
	uint8_t lpbk;
	#define PORT_MAC_QCFG_RESP_LPBK_NONE			   (0x0UL << 0)
	#define PORT_MAC_QCFG_RESP_LPBK_LOCAL			   (0x1UL << 0)
	#define PORT_MAC_QCFG_RESP_LPBK_REMOTE			   (0x2UL << 0)
	uint8_t ivlan_pri2cos_map_pri;
	uint8_t lcos_map_pri;
	uint8_t tunnel_pri2cos_map_pri;
	uint8_t dscp2pri_map_pri;
	uint16_t rx_ts_capture_ptp_msg_type;
	uint16_t tx_ts_capture_ptp_msg_type;
	uint8_t unused_0;
	uint8_t valid;
};

/* hwrm_port_qstats */
/* Input (40 bytes) */
struct hwrm_port_qstats_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t port_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2[3];
	uint8_t unused_3;
	uint64_t tx_stat_host_addr;
	uint64_t rx_stat_host_addr;
};

/* Output (16 bytes) */
struct hwrm_port_qstats_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t tx_stat_size;
	uint16_t rx_stat_size;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_port_lpbk_qstats */
/* Input (16 bytes) */
struct hwrm_port_lpbk_qstats_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
};

/* Output (96 bytes) */
struct hwrm_port_lpbk_qstats_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint64_t lpbk_ucast_frames;
	uint64_t lpbk_mcast_frames;
	uint64_t lpbk_bcast_frames;
	uint64_t lpbk_ucast_bytes;
	uint64_t lpbk_mcast_bytes;
	uint64_t lpbk_bcast_bytes;
	uint64_t tx_stat_discard;
	uint64_t tx_stat_error;
	uint64_t rx_stat_discard;
	uint64_t rx_stat_error;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_port_clr_stats */
/* Input (24 bytes) */
struct hwrm_port_clr_stats_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t port_id;
	uint16_t unused_0[3];
};

/* Output (16 bytes) */
struct hwrm_port_clr_stats_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_port_lpbk_clr_stats */
/* Input (16 bytes) */
struct hwrm_port_lpbk_clr_stats_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
};

/* Output (16 bytes) */
struct hwrm_port_lpbk_clr_stats_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_port_blink_led */
/* Input (24 bytes) */
struct hwrm_port_blink_led_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t num_blinks;
	uint32_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_port_blink_led_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_port_ts_query */
/* Input (24 bytes) */
struct hwrm_port_ts_query_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define PORT_TS_QUERY_REQ_FLAGS_PATH			    0x1UL
	#define PORT_TS_QUERY_REQ_FLAGS_PATH_TX		   (0x0UL << 0)
	#define PORT_TS_QUERY_REQ_FLAGS_PATH_RX		   (0x1UL << 0)
	#define PORT_TS_QUERY_REQ_FLAGS_PATH_LAST    PORT_TS_QUERY_REQ_FLAGS_PATH_RX
	uint16_t port_id;
	uint16_t unused_0;
};

/* Output (24 bytes) */
struct hwrm_port_ts_query_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint64_t ptp_msg_ts;
	uint16_t ptp_msg_seqid;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t unused_4;
	uint8_t valid;
};

/* hwrm_port_phy_qcaps */
/* Input (24 bytes) */
struct hwrm_port_phy_qcaps_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t port_id;
	uint16_t unused_0[3];
};

/* Output (24 bytes) */
struct hwrm_port_phy_qcaps_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint8_t eee_supported;
	#define PORT_PHY_QCAPS_RESP_EEE_SUPPORTED		    0x1UL
	#define PORT_PHY_QCAPS_RESP_RSVD1_MASK			    0xfeUL
	#define PORT_PHY_QCAPS_RESP_RSVD1_SFT			    1
	uint8_t unused_0;
	uint16_t supported_speeds_force_mode;
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_100MBHD 0x1UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_100MB 0x2UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_1GBHD 0x4UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_1GB 0x8UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_2GB 0x10UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_2_5GB 0x20UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_10GB 0x40UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_20GB 0x80UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_25GB 0x100UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_40GB 0x200UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_50GB 0x400UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_100GB 0x800UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_10MBHD 0x1000UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_FORCE_MODE_10MB 0x2000UL
	uint16_t supported_speeds_auto_mode;
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_100MBHD 0x1UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_100MB 0x2UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_1GBHD 0x4UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_1GB 0x8UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_2GB 0x10UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_2_5GB 0x20UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_10GB 0x40UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_20GB 0x80UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_25GB 0x100UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_40GB 0x200UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_50GB 0x400UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_100GB 0x800UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_10MBHD 0x1000UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_AUTO_MODE_10MB 0x2000UL
	uint16_t supported_speeds_eee_mode;
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_EEE_MODE_RSVD1 0x1UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_EEE_MODE_100MB 0x2UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_EEE_MODE_RSVD2 0x4UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_EEE_MODE_1GB  0x8UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_EEE_MODE_RSVD3 0x10UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_EEE_MODE_RSVD4 0x20UL
	#define PORT_PHY_QCAPS_RESP_SUPPORTED_SPEEDS_EEE_MODE_10GB 0x40UL
	uint32_t tx_lpi_timer_low;
	#define PORT_PHY_QCAPS_RESP_TX_LPI_TIMER_LOW_MASK	    0xffffffUL
	#define PORT_PHY_QCAPS_RESP_TX_LPI_TIMER_LOW_SFT	    0
	#define PORT_PHY_QCAPS_RESP_RSVD2_MASK			    0xff000000UL
	#define PORT_PHY_QCAPS_RESP_RSVD2_SFT			    24
	uint32_t valid_tx_lpi_timer_high;
	#define PORT_PHY_QCAPS_RESP_TX_LPI_TIMER_HIGH_MASK	    0xffffffUL
	#define PORT_PHY_QCAPS_RESP_TX_LPI_TIMER_HIGH_SFT	    0
	#define PORT_PHY_QCAPS_RESP_VALID_MASK			    0xff000000UL
	#define PORT_PHY_QCAPS_RESP_VALID_SFT			    24
};

/* hwrm_queue_qportcfg */
/* Input (24 bytes) */
struct hwrm_queue_qportcfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define QUEUE_QPORTCFG_REQ_FLAGS_PATH			    0x1UL
	#define QUEUE_QPORTCFG_REQ_FLAGS_PATH_TX		   (0x0UL << 0)
	#define QUEUE_QPORTCFG_REQ_FLAGS_PATH_RX		   (0x1UL << 0)
	#define QUEUE_QPORTCFG_REQ_FLAGS_PATH_LAST    QUEUE_QPORTCFG_REQ_FLAGS_PATH_RX
	uint16_t port_id;
	uint16_t unused_0;
};

/* Output (32 bytes) */
struct hwrm_queue_qportcfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint8_t max_configurable_queues;
	uint8_t max_configurable_lossless_queues;
	uint8_t queue_cfg_allowed;
	uint8_t queue_buffers_cfg_allowed;
	uint8_t queue_pfcenable_cfg_allowed;
	uint8_t queue_pri2cos_cfg_allowed;
	uint8_t queue_cos2bw_cfg_allowed;
	uint8_t queue_id0;
	uint8_t queue_id0_service_profile;
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID0_SERVICE_PROFILE_LOSSY (0x0UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID0_SERVICE_PROFILE_LOSSLESS (0x1UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID0_SERVICE_PROFILE_UNKNOWN (0xffUL << 0)
	uint8_t queue_id1;
	uint8_t queue_id1_service_profile;
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID1_SERVICE_PROFILE_LOSSY (0x0UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID1_SERVICE_PROFILE_LOSSLESS (0x1UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID1_SERVICE_PROFILE_UNKNOWN (0xffUL << 0)
	uint8_t queue_id2;
	uint8_t queue_id2_service_profile;
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID2_SERVICE_PROFILE_LOSSY (0x0UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID2_SERVICE_PROFILE_LOSSLESS (0x1UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID2_SERVICE_PROFILE_UNKNOWN (0xffUL << 0)
	uint8_t queue_id3;
	uint8_t queue_id3_service_profile;
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID3_SERVICE_PROFILE_LOSSY (0x0UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID3_SERVICE_PROFILE_LOSSLESS (0x1UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID3_SERVICE_PROFILE_UNKNOWN (0xffUL << 0)
	uint8_t queue_id4;
	uint8_t queue_id4_service_profile;
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID4_SERVICE_PROFILE_LOSSY (0x0UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID4_SERVICE_PROFILE_LOSSLESS (0x1UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID4_SERVICE_PROFILE_UNKNOWN (0xffUL << 0)
	uint8_t queue_id5;
	uint8_t queue_id5_service_profile;
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID5_SERVICE_PROFILE_LOSSY (0x0UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID5_SERVICE_PROFILE_LOSSLESS (0x1UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID5_SERVICE_PROFILE_UNKNOWN (0xffUL << 0)
	uint8_t queue_id6;
	uint8_t queue_id6_service_profile;
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID6_SERVICE_PROFILE_LOSSY (0x0UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID6_SERVICE_PROFILE_LOSSLESS (0x1UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID6_SERVICE_PROFILE_UNKNOWN (0xffUL << 0)
	uint8_t queue_id7;
	uint8_t queue_id7_service_profile;
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID7_SERVICE_PROFILE_LOSSY (0x0UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID7_SERVICE_PROFILE_LOSSLESS (0x1UL << 0)
	#define QUEUE_QPORTCFG_RESP_QUEUE_ID7_SERVICE_PROFILE_UNKNOWN (0xffUL << 0)
	uint8_t valid;
};

/* hwrm_queue_qcfg */
/* Input (24 bytes) */
struct hwrm_queue_qcfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define QUEUE_QCFG_REQ_FLAGS_PATH			    0x1UL
	#define QUEUE_QCFG_REQ_FLAGS_PATH_TX			   (0x0UL << 0)
	#define QUEUE_QCFG_REQ_FLAGS_PATH_RX			   (0x1UL << 0)
	#define QUEUE_QCFG_REQ_FLAGS_PATH_LAST    QUEUE_QCFG_REQ_FLAGS_PATH_RX
	uint32_t queue_id;
};

/* Output (16 bytes) */
struct hwrm_queue_qcfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t queue_len;
	uint8_t service_profile;
	#define QUEUE_QCFG_RESP_SERVICE_PROFILE_LOSSY		   (0x0UL << 0)
	#define QUEUE_QCFG_RESP_SERVICE_PROFILE_LOSSLESS	   (0x1UL << 0)
	#define QUEUE_QCFG_RESP_SERVICE_PROFILE_UNKNOWN	   (0xffUL << 0)
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t valid;
};

/* hwrm_queue_cfg */
/* Input (40 bytes) */
struct hwrm_queue_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define QUEUE_CFG_REQ_FLAGS_PATH			    0x1UL
	#define QUEUE_CFG_REQ_FLAGS_PATH_TX			   (0x0UL << 0)
	#define QUEUE_CFG_REQ_FLAGS_PATH_RX			   (0x1UL << 0)
	#define QUEUE_CFG_REQ_FLAGS_PATH_LAST    QUEUE_CFG_REQ_FLAGS_PATH_RX
	uint32_t enables;
	#define QUEUE_CFG_REQ_ENABLES_DFLT_LEN			    0x1UL
	#define QUEUE_CFG_REQ_ENABLES_SERVICE_PROFILE		    0x2UL
	uint32_t queue_id;
	uint32_t dflt_len;
	uint8_t service_profile;
	#define QUEUE_CFG_REQ_SERVICE_PROFILE_LOSSY		   (0x0UL << 0)
	#define QUEUE_CFG_REQ_SERVICE_PROFILE_LOSSLESS		   (0x1UL << 0)
	#define QUEUE_CFG_REQ_SERVICE_PROFILE_UNKNOWN		   (0xffUL << 0)
	uint8_t unused_0[7];
};

/* Output (16 bytes) */
struct hwrm_queue_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_queue_buffers_qcfg */
/* Input (24 bytes) */
struct hwrm_queue_buffers_qcfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define QUEUE_BUFFERS_QCFG_REQ_FLAGS_PATH		    0x1UL
	#define QUEUE_BUFFERS_QCFG_REQ_FLAGS_PATH_TX		   (0x0UL << 0)
	#define QUEUE_BUFFERS_QCFG_REQ_FLAGS_PATH_RX		   (0x1UL << 0)
	#define QUEUE_BUFFERS_QCFG_REQ_FLAGS_PATH_LAST    QUEUE_BUFFERS_QCFG_REQ_FLAGS_PATH_RX
	uint32_t queue_id;
};

/* Output (40 bytes) */
struct hwrm_queue_buffers_qcfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t reserved;
	uint32_t shared;
	uint32_t xoff;
	uint32_t xon;
	uint32_t full;
	uint32_t notfull;
	uint32_t max;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_queue_buffers_cfg */
/* Input (56 bytes) */
struct hwrm_queue_buffers_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define QUEUE_BUFFERS_CFG_REQ_FLAGS_PATH		    0x1UL
	#define QUEUE_BUFFERS_CFG_REQ_FLAGS_PATH_TX		   (0x0UL << 0)
	#define QUEUE_BUFFERS_CFG_REQ_FLAGS_PATH_RX		   (0x1UL << 0)
	#define QUEUE_BUFFERS_CFG_REQ_FLAGS_PATH_LAST    QUEUE_BUFFERS_CFG_REQ_FLAGS_PATH_RX
	uint32_t enables;
	#define QUEUE_BUFFERS_CFG_REQ_ENABLES_RESERVED		    0x1UL
	#define QUEUE_BUFFERS_CFG_REQ_ENABLES_SHARED		    0x2UL
	#define QUEUE_BUFFERS_CFG_REQ_ENABLES_XOFF		    0x4UL
	#define QUEUE_BUFFERS_CFG_REQ_ENABLES_XON		    0x8UL
	#define QUEUE_BUFFERS_CFG_REQ_ENABLES_FULL		    0x10UL
	#define QUEUE_BUFFERS_CFG_REQ_ENABLES_NOTFULL		    0x20UL
	#define QUEUE_BUFFERS_CFG_REQ_ENABLES_MAX		    0x40UL
	uint32_t queue_id;
	uint32_t reserved;
	uint32_t shared;
	uint32_t xoff;
	uint32_t xon;
	uint32_t full;
	uint32_t notfull;
	uint32_t max;
};

/* Output (16 bytes) */
struct hwrm_queue_buffers_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_queue_pfcenable_qcfg */
/* Input (24 bytes) */
struct hwrm_queue_pfcenable_qcfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t port_id;
	uint16_t unused_0[3];
};

/* Output (16 bytes) */
struct hwrm_queue_pfcenable_qcfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t flags;
	#define QUEUE_PFCENABLE_QCFG_RESP_FLAGS_PRI0_PFC_ENABLED   0x1UL
	#define QUEUE_PFCENABLE_QCFG_RESP_FLAGS_PRI1_PFC_ENABLED   0x2UL
	#define QUEUE_PFCENABLE_QCFG_RESP_FLAGS_PRI2_PFC_ENABLED   0x4UL
	#define QUEUE_PFCENABLE_QCFG_RESP_FLAGS_PRI3_PFC_ENABLED   0x8UL
	#define QUEUE_PFCENABLE_QCFG_RESP_FLAGS_PRI4_PFC_ENABLED   0x10UL
	#define QUEUE_PFCENABLE_QCFG_RESP_FLAGS_PRI5_PFC_ENABLED   0x20UL
	#define QUEUE_PFCENABLE_QCFG_RESP_FLAGS_PRI6_PFC_ENABLED   0x40UL
	#define QUEUE_PFCENABLE_QCFG_RESP_FLAGS_PRI7_PFC_ENABLED   0x80UL
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_queue_pfcenable_cfg */
/* Input (24 bytes) */
struct hwrm_queue_pfcenable_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define QUEUE_PFCENABLE_CFG_REQ_FLAGS_PRI0_PFC_ENABLED     0x1UL
	#define QUEUE_PFCENABLE_CFG_REQ_FLAGS_PRI1_PFC_ENABLED     0x2UL
	#define QUEUE_PFCENABLE_CFG_REQ_FLAGS_PRI2_PFC_ENABLED     0x4UL
	#define QUEUE_PFCENABLE_CFG_REQ_FLAGS_PRI3_PFC_ENABLED     0x8UL
	#define QUEUE_PFCENABLE_CFG_REQ_FLAGS_PRI4_PFC_ENABLED     0x10UL
	#define QUEUE_PFCENABLE_CFG_REQ_FLAGS_PRI5_PFC_ENABLED     0x20UL
	#define QUEUE_PFCENABLE_CFG_REQ_FLAGS_PRI6_PFC_ENABLED     0x40UL
	#define QUEUE_PFCENABLE_CFG_REQ_FLAGS_PRI7_PFC_ENABLED     0x80UL
	uint16_t port_id;
	uint16_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_queue_pfcenable_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_queue_pri2cos_qcfg */
/* Input (24 bytes) */
struct hwrm_queue_pri2cos_qcfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define QUEUE_PRI2COS_QCFG_REQ_FLAGS_PATH		    0x1UL
	#define QUEUE_PRI2COS_QCFG_REQ_FLAGS_PATH_TX		   (0x0UL << 0)
	#define QUEUE_PRI2COS_QCFG_REQ_FLAGS_PATH_RX		   (0x1UL << 0)
	#define QUEUE_PRI2COS_QCFG_REQ_FLAGS_PATH_LAST    QUEUE_PRI2COS_QCFG_REQ_FLAGS_PATH_RX
	#define QUEUE_PRI2COS_QCFG_REQ_FLAGS_IVLAN		    0x2UL
	uint8_t port_id;
	uint8_t unused_0[3];
};

/* Output (24 bytes) */
struct hwrm_queue_pri2cos_qcfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint8_t pri0_cos_queue_id;
	uint8_t pri1_cos_queue_id;
	uint8_t pri2_cos_queue_id;
	uint8_t pri3_cos_queue_id;
	uint8_t pri4_cos_queue_id;
	uint8_t pri5_cos_queue_id;
	uint8_t pri6_cos_queue_id;
	uint8_t pri7_cos_queue_id;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_queue_pri2cos_cfg */
/* Input (40 bytes) */
struct hwrm_queue_pri2cos_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define QUEUE_PRI2COS_CFG_REQ_FLAGS_PATH		    0x1UL
	#define QUEUE_PRI2COS_CFG_REQ_FLAGS_PATH_TX		   (0x0UL << 0)
	#define QUEUE_PRI2COS_CFG_REQ_FLAGS_PATH_RX		   (0x1UL << 0)
	#define QUEUE_PRI2COS_CFG_REQ_FLAGS_PATH_LAST    QUEUE_PRI2COS_CFG_REQ_FLAGS_PATH_RX
	#define QUEUE_PRI2COS_CFG_REQ_FLAGS_IVLAN		    0x2UL
	uint32_t enables;
	uint8_t port_id;
	uint8_t pri0_cos_queue_id;
	uint8_t pri1_cos_queue_id;
	uint8_t pri2_cos_queue_id;
	uint8_t pri3_cos_queue_id;
	uint8_t pri4_cos_queue_id;
	uint8_t pri5_cos_queue_id;
	uint8_t pri6_cos_queue_id;
	uint8_t pri7_cos_queue_id;
	uint8_t unused_0[7];
};

/* Output (16 bytes) */
struct hwrm_queue_pri2cos_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_queue_cos2bw_qcfg */
/* Input (24 bytes) */
struct hwrm_queue_cos2bw_qcfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t port_id;
	uint16_t unused_0[3];
};

/* Output (112 bytes) */
struct hwrm_queue_cos2bw_qcfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint8_t queue_id0;
	uint8_t unused_0;
	uint16_t unused_1;
	uint32_t queue_id0_min_bw;
	uint32_t queue_id0_max_bw;
	uint8_t queue_id0_tsa_assign;
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID0_TSA_ASSIGN_SP    (0x0UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID0_TSA_ASSIGN_ETS   (0x1UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID0_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID0_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id0_pri_lvl;
	uint8_t queue_id0_bw_weight;
	uint8_t queue_id1;
	uint32_t queue_id1_min_bw;
	uint32_t queue_id1_max_bw;
	uint8_t queue_id1_tsa_assign;
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID1_TSA_ASSIGN_SP    (0x0UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID1_TSA_ASSIGN_ETS   (0x1UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID1_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID1_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id1_pri_lvl;
	uint8_t queue_id1_bw_weight;
	uint8_t queue_id2;
	uint32_t queue_id2_min_bw;
	uint32_t queue_id2_max_bw;
	uint8_t queue_id2_tsa_assign;
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID2_TSA_ASSIGN_SP    (0x0UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID2_TSA_ASSIGN_ETS   (0x1UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID2_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID2_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id2_pri_lvl;
	uint8_t queue_id2_bw_weight;
	uint8_t queue_id3;
	uint32_t queue_id3_min_bw;
	uint32_t queue_id3_max_bw;
	uint8_t queue_id3_tsa_assign;
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID3_TSA_ASSIGN_SP    (0x0UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID3_TSA_ASSIGN_ETS   (0x1UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID3_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID3_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id3_pri_lvl;
	uint8_t queue_id3_bw_weight;
	uint8_t queue_id4;
	uint32_t queue_id4_min_bw;
	uint32_t queue_id4_max_bw;
	uint8_t queue_id4_tsa_assign;
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID4_TSA_ASSIGN_SP    (0x0UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID4_TSA_ASSIGN_ETS   (0x1UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID4_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID4_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id4_pri_lvl;
	uint8_t queue_id4_bw_weight;
	uint8_t queue_id5;
	uint32_t queue_id5_min_bw;
	uint32_t queue_id5_max_bw;
	uint8_t queue_id5_tsa_assign;
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID5_TSA_ASSIGN_SP    (0x0UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID5_TSA_ASSIGN_ETS   (0x1UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID5_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID5_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id5_pri_lvl;
	uint8_t queue_id5_bw_weight;
	uint8_t queue_id6;
	uint32_t queue_id6_min_bw;
	uint32_t queue_id6_max_bw;
	uint8_t queue_id6_tsa_assign;
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID6_TSA_ASSIGN_SP    (0x0UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID6_TSA_ASSIGN_ETS   (0x1UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID6_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID6_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id6_pri_lvl;
	uint8_t queue_id6_bw_weight;
	uint8_t queue_id7;
	uint32_t queue_id7_min_bw;
	uint32_t queue_id7_max_bw;
	uint8_t queue_id7_tsa_assign;
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID7_TSA_ASSIGN_SP    (0x0UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID7_TSA_ASSIGN_ETS   (0x1UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID7_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_QCFG_RESP_QUEUE_ID7_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id7_pri_lvl;
	uint8_t queue_id7_bw_weight;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t unused_4;
	uint8_t unused_5;
	uint8_t valid;
};

/* hwrm_queue_cos2bw_cfg */
/* Input (128 bytes) */
struct hwrm_queue_cos2bw_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	uint32_t enables;
	#define QUEUE_COS2BW_CFG_REQ_ENABLES_COS_QUEUE_ID0_VALID   0x1UL
	#define QUEUE_COS2BW_CFG_REQ_ENABLES_COS_QUEUE_ID1_VALID   0x2UL
	#define QUEUE_COS2BW_CFG_REQ_ENABLES_COS_QUEUE_ID2_VALID   0x4UL
	#define QUEUE_COS2BW_CFG_REQ_ENABLES_COS_QUEUE_ID3_VALID   0x8UL
	#define QUEUE_COS2BW_CFG_REQ_ENABLES_COS_QUEUE_ID4_VALID   0x10UL
	#define QUEUE_COS2BW_CFG_REQ_ENABLES_COS_QUEUE_ID5_VALID   0x20UL
	#define QUEUE_COS2BW_CFG_REQ_ENABLES_COS_QUEUE_ID6_VALID   0x40UL
	#define QUEUE_COS2BW_CFG_REQ_ENABLES_COS_QUEUE_ID7_VALID   0x80UL
	uint16_t port_id;
	uint8_t queue_id0;
	uint8_t unused_0;
	uint32_t queue_id0_min_bw;
	uint32_t queue_id0_max_bw;
	uint8_t queue_id0_tsa_assign;
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID0_TSA_ASSIGN_SP      (0x0UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID0_TSA_ASSIGN_ETS     (0x1UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID0_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID0_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id0_pri_lvl;
	uint8_t queue_id0_bw_weight;
	uint8_t queue_id1;
	uint32_t queue_id1_min_bw;
	uint32_t queue_id1_max_bw;
	uint8_t queue_id1_tsa_assign;
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID1_TSA_ASSIGN_SP      (0x0UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID1_TSA_ASSIGN_ETS     (0x1UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID1_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID1_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id1_pri_lvl;
	uint8_t queue_id1_bw_weight;
	uint8_t queue_id2;
	uint32_t queue_id2_min_bw;
	uint32_t queue_id2_max_bw;
	uint8_t queue_id2_tsa_assign;
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID2_TSA_ASSIGN_SP      (0x0UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID2_TSA_ASSIGN_ETS     (0x1UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID2_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID2_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id2_pri_lvl;
	uint8_t queue_id2_bw_weight;
	uint8_t queue_id3;
	uint32_t queue_id3_min_bw;
	uint32_t queue_id3_max_bw;
	uint8_t queue_id3_tsa_assign;
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID3_TSA_ASSIGN_SP      (0x0UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID3_TSA_ASSIGN_ETS     (0x1UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID3_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID3_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id3_pri_lvl;
	uint8_t queue_id3_bw_weight;
	uint8_t queue_id4;
	uint32_t queue_id4_min_bw;
	uint32_t queue_id4_max_bw;
	uint8_t queue_id4_tsa_assign;
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID4_TSA_ASSIGN_SP      (0x0UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID4_TSA_ASSIGN_ETS     (0x1UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID4_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID4_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id4_pri_lvl;
	uint8_t queue_id4_bw_weight;
	uint8_t queue_id5;
	uint32_t queue_id5_min_bw;
	uint32_t queue_id5_max_bw;
	uint8_t queue_id5_tsa_assign;
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID5_TSA_ASSIGN_SP      (0x0UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID5_TSA_ASSIGN_ETS     (0x1UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID5_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID5_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id5_pri_lvl;
	uint8_t queue_id5_bw_weight;
	uint8_t queue_id6;
	uint32_t queue_id6_min_bw;
	uint32_t queue_id6_max_bw;
	uint8_t queue_id6_tsa_assign;
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID6_TSA_ASSIGN_SP      (0x0UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID6_TSA_ASSIGN_ETS     (0x1UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID6_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID6_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id6_pri_lvl;
	uint8_t queue_id6_bw_weight;
	uint8_t queue_id7;
	uint32_t queue_id7_min_bw;
	uint32_t queue_id7_max_bw;
	uint8_t queue_id7_tsa_assign;
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID7_TSA_ASSIGN_SP      (0x0UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID7_TSA_ASSIGN_ETS     (0x1UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID7_TSA_ASSIGN_RESERVED_FIRST (0x2UL << 0)
	#define QUEUE_COS2BW_CFG_REQ_QUEUE_ID7_TSA_ASSIGN_RESERVED_LAST (0xffffUL << 0)
	uint8_t queue_id7_pri_lvl;
	uint8_t queue_id7_bw_weight;
	uint8_t unused_1[5];
};

/* Output (16 bytes) */
struct hwrm_queue_cos2bw_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_vnic_alloc */
/* Input (24 bytes) */
struct hwrm_vnic_alloc_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define VNIC_ALLOC_REQ_FLAGS_DEFAULT			    0x1UL
	uint32_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_vnic_alloc_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t vnic_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_vnic_free */
/* Input (24 bytes) */
struct hwrm_vnic_free_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t vnic_id;
	uint32_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_vnic_free_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_vnic_cfg */
/* Input (40 bytes) */
struct hwrm_vnic_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define VNIC_CFG_REQ_FLAGS_DEFAULT			    0x1UL
	#define VNIC_CFG_REQ_FLAGS_VLAN_STRIP_MODE		    0x2UL
	#define VNIC_CFG_REQ_FLAGS_BD_STALL_MODE		    0x4UL
	#define VNIC_CFG_REQ_FLAGS_ROCE_DUAL_VNIC_MODE		    0x8UL
	#define VNIC_CFG_REQ_FLAGS_ROCE_ONLY_VNIC_MODE		    0x10UL
	uint32_t enables;
	#define VNIC_CFG_REQ_ENABLES_DFLT_RING_GRP		    0x1UL
	#define VNIC_CFG_REQ_ENABLES_RSS_RULE			    0x2UL
	#define VNIC_CFG_REQ_ENABLES_COS_RULE			    0x4UL
	#define VNIC_CFG_REQ_ENABLES_LB_RULE			    0x8UL
	#define VNIC_CFG_REQ_ENABLES_MRU			    0x10UL
	uint16_t vnic_id;
	uint16_t dflt_ring_grp;
	uint16_t rss_rule;
	uint16_t cos_rule;
	uint16_t lb_rule;
	uint16_t mru;
	uint32_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_vnic_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_vnic_qcfg */
/* Input (32 bytes) */
struct hwrm_vnic_qcfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t enables;
	#define VNIC_QCFG_REQ_ENABLES_VF_ID_VALID		    0x1UL
	uint32_t vnic_id;
	uint16_t vf_id;
	uint16_t unused_0[3];
};

/* Output (32 bytes) */
struct hwrm_vnic_qcfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t dflt_ring_grp;
	uint16_t rss_rule;
	uint16_t cos_rule;
	uint16_t lb_rule;
	uint16_t mru;
	uint8_t unused_0;
	uint8_t unused_1;
	uint32_t flags;
	#define VNIC_QCFG_RESP_FLAGS_DEFAULT			    0x1UL
	#define VNIC_QCFG_RESP_FLAGS_VLAN_STRIP_MODE		    0x2UL
	#define VNIC_QCFG_RESP_FLAGS_BD_STALL_MODE		    0x4UL
	#define VNIC_QCFG_RESP_FLAGS_ROCE_DUAL_VNIC_MODE	    0x8UL
	#define VNIC_QCFG_RESP_FLAGS_ROCE_ONLY_VNIC_MODE	    0x10UL
	uint32_t unused_2;
	uint8_t unused_3;
	uint8_t unused_4;
	uint8_t unused_5;
	uint8_t valid;
};

/* hwrm_vnic_tpa_cfg */
/* Input (40 bytes) */
struct hwrm_vnic_tpa_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define VNIC_TPA_CFG_REQ_FLAGS_TPA			    0x1UL
	#define VNIC_TPA_CFG_REQ_FLAGS_ENCAP_TPA		    0x2UL
	#define VNIC_TPA_CFG_REQ_FLAGS_RSC_WND_UPDATE		    0x4UL
	#define VNIC_TPA_CFG_REQ_FLAGS_GRO			    0x8UL
	#define VNIC_TPA_CFG_REQ_FLAGS_AGG_WITH_ECN		    0x10UL
	#define VNIC_TPA_CFG_REQ_FLAGS_AGG_WITH_SAME_GRE_SEQ       0x20UL
	#define VNIC_TPA_CFG_REQ_FLAGS_GRO_IPID_CHECK		    0x40UL
	#define VNIC_TPA_CFG_REQ_FLAGS_GRO_TTL_CHECK		    0x80UL
	uint32_t enables;
	#define VNIC_TPA_CFG_REQ_ENABLES_MAX_AGG_SEGS		    0x1UL
	#define VNIC_TPA_CFG_REQ_ENABLES_MAX_AGGS		    0x2UL
	#define VNIC_TPA_CFG_REQ_ENABLES_MAX_AGG_TIMER		    0x4UL
	#define VNIC_TPA_CFG_REQ_ENABLES_MIN_AGG_LEN		    0x8UL
	uint16_t vnic_id;
	uint16_t max_agg_segs;
	#define VNIC_TPA_CFG_REQ_MAX_AGG_SEGS_1		   (0x0UL << 0)
	#define VNIC_TPA_CFG_REQ_MAX_AGG_SEGS_2		   (0x1UL << 0)
	#define VNIC_TPA_CFG_REQ_MAX_AGG_SEGS_4		   (0x2UL << 0)
	#define VNIC_TPA_CFG_REQ_MAX_AGG_SEGS_8		   (0x3UL << 0)
	#define VNIC_TPA_CFG_REQ_MAX_AGG_SEGS_MAX		   (0x1fUL << 0)
	uint16_t max_aggs;
	#define VNIC_TPA_CFG_REQ_MAX_AGGS_1			   (0x0UL << 0)
	#define VNIC_TPA_CFG_REQ_MAX_AGGS_2			   (0x1UL << 0)
	#define VNIC_TPA_CFG_REQ_MAX_AGGS_4			   (0x2UL << 0)
	#define VNIC_TPA_CFG_REQ_MAX_AGGS_8			   (0x3UL << 0)
	#define VNIC_TPA_CFG_REQ_MAX_AGGS_16			   (0x4UL << 0)
	#define VNIC_TPA_CFG_REQ_MAX_AGGS_MAX			   (0x7UL << 0)
	uint8_t unused_0;
	uint8_t unused_1;
	uint32_t max_agg_timer;
	uint32_t min_agg_len;
};

/* Output (16 bytes) */
struct hwrm_vnic_tpa_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_vnic_tpa_qcfg */
/* Input (24 bytes) */
struct hwrm_vnic_tpa_qcfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t vnic_id;
	uint16_t unused_0[3];
};

/* Output (32 bytes) */
struct hwrm_vnic_tpa_qcfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t flags;
	#define VNIC_TPA_QCFG_RESP_FLAGS_TPA			    0x1UL
	#define VNIC_TPA_QCFG_RESP_FLAGS_ENCAP_TPA		    0x2UL
	#define VNIC_TPA_QCFG_RESP_FLAGS_RSC_WND_UPDATE	    0x4UL
	#define VNIC_TPA_QCFG_RESP_FLAGS_GRO			    0x8UL
	#define VNIC_TPA_QCFG_RESP_FLAGS_AGG_WITH_ECN		    0x10UL
	#define VNIC_TPA_QCFG_RESP_FLAGS_AGG_WITH_SAME_GRE_SEQ     0x20UL
	#define VNIC_TPA_QCFG_RESP_FLAGS_GRO_IPID_CHECK	    0x40UL
	#define VNIC_TPA_QCFG_RESP_FLAGS_GRO_TTL_CHECK		    0x80UL
	uint16_t max_agg_segs;
	#define VNIC_TPA_QCFG_RESP_MAX_AGG_SEGS_1		   (0x0UL << 0)
	#define VNIC_TPA_QCFG_RESP_MAX_AGG_SEGS_2		   (0x1UL << 0)
	#define VNIC_TPA_QCFG_RESP_MAX_AGG_SEGS_4		   (0x2UL << 0)
	#define VNIC_TPA_QCFG_RESP_MAX_AGG_SEGS_8		   (0x3UL << 0)
	#define VNIC_TPA_QCFG_RESP_MAX_AGG_SEGS_MAX		   (0x1fUL << 0)
	uint16_t max_aggs;
	#define VNIC_TPA_QCFG_RESP_MAX_AGGS_1			   (0x0UL << 0)
	#define VNIC_TPA_QCFG_RESP_MAX_AGGS_2			   (0x1UL << 0)
	#define VNIC_TPA_QCFG_RESP_MAX_AGGS_4			   (0x2UL << 0)
	#define VNIC_TPA_QCFG_RESP_MAX_AGGS_8			   (0x3UL << 0)
	#define VNIC_TPA_QCFG_RESP_MAX_AGGS_16			   (0x4UL << 0)
	#define VNIC_TPA_QCFG_RESP_MAX_AGGS_MAX		   (0x7UL << 0)
	uint32_t max_agg_timer;
	uint32_t min_agg_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_vnic_rss_cfg */
/* Input (48 bytes) */
struct hwrm_vnic_rss_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t hash_type;
	#define VNIC_RSS_CFG_REQ_HASH_TYPE_IPV4		    0x1UL
	#define VNIC_RSS_CFG_REQ_HASH_TYPE_TCP_IPV4		    0x2UL
	#define VNIC_RSS_CFG_REQ_HASH_TYPE_UDP_IPV4		    0x4UL
	#define VNIC_RSS_CFG_REQ_HASH_TYPE_IPV6		    0x8UL
	#define VNIC_RSS_CFG_REQ_HASH_TYPE_TCP_IPV6		    0x10UL
	#define VNIC_RSS_CFG_REQ_HASH_TYPE_UDP_IPV6		    0x20UL
	uint32_t unused_0;
	uint64_t ring_grp_tbl_addr;
	uint64_t hash_key_tbl_addr;
	uint16_t rss_ctx_idx;
	uint16_t unused_1[3];
};

/* Output (16 bytes) */
struct hwrm_vnic_rss_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_vnic_rss_qcfg */
/* Input (24 bytes) */
struct hwrm_vnic_rss_qcfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t rss_ctx_idx;
	uint16_t unused_0[3];
};

/* Output (64 bytes) */
struct hwrm_vnic_rss_qcfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t hash_type;
	#define VNIC_RSS_QCFG_RESP_HASH_TYPE_IPV4		    0x1UL
	#define VNIC_RSS_QCFG_RESP_HASH_TYPE_TCP_IPV4		    0x2UL
	#define VNIC_RSS_QCFG_RESP_HASH_TYPE_UDP_IPV4		    0x4UL
	#define VNIC_RSS_QCFG_RESP_HASH_TYPE_IPV6		    0x8UL
	#define VNIC_RSS_QCFG_RESP_HASH_TYPE_TCP_IPV6		    0x10UL
	#define VNIC_RSS_QCFG_RESP_HASH_TYPE_UDP_IPV6		    0x20UL
	uint32_t unused_0;
	uint32_t hash_key[10];
	uint32_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t unused_4;
	uint8_t valid;
};

/* hwrm_vnic_plcmodes_cfg */
/* Input (40 bytes) */
struct hwrm_vnic_plcmodes_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define VNIC_PLCMODES_CFG_REQ_FLAGS_REGULAR_PLACEMENT      0x1UL
	#define VNIC_PLCMODES_CFG_REQ_FLAGS_JUMBO_PLACEMENT	    0x2UL
	#define VNIC_PLCMODES_CFG_REQ_FLAGS_HDS_IPV4		    0x4UL
	#define VNIC_PLCMODES_CFG_REQ_FLAGS_HDS_IPV6		    0x8UL
	#define VNIC_PLCMODES_CFG_REQ_FLAGS_HDS_FCOE		    0x10UL
	#define VNIC_PLCMODES_CFG_REQ_FLAGS_HDS_ROCE		    0x20UL
	uint32_t enables;
	#define VNIC_PLCMODES_CFG_REQ_ENABLES_JUMBO_THRESH_VALID   0x1UL
	#define VNIC_PLCMODES_CFG_REQ_ENABLES_HDS_OFFSET_VALID     0x2UL
	#define VNIC_PLCMODES_CFG_REQ_ENABLES_HDS_THRESHOLD_VALID  0x4UL
	uint32_t vnic_id;
	uint16_t jumbo_thresh;
	uint16_t hds_offset;
	uint16_t hds_threshold;
	uint16_t unused_0[3];
};

/* Output (16 bytes) */
struct hwrm_vnic_plcmodes_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_vnic_plcmodes_qcfg */
/* Input (24 bytes) */
struct hwrm_vnic_plcmodes_qcfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t vnic_id;
	uint32_t unused_0;
};

/* Output (24 bytes) */
struct hwrm_vnic_plcmodes_qcfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t flags;
	#define VNIC_PLCMODES_QCFG_RESP_FLAGS_REGULAR_PLACEMENT    0x1UL
	#define VNIC_PLCMODES_QCFG_RESP_FLAGS_JUMBO_PLACEMENT      0x2UL
	#define VNIC_PLCMODES_QCFG_RESP_FLAGS_HDS_IPV4		    0x4UL
	#define VNIC_PLCMODES_QCFG_RESP_FLAGS_HDS_IPV6		    0x8UL
	#define VNIC_PLCMODES_QCFG_RESP_FLAGS_HDS_FCOE		    0x10UL
	#define VNIC_PLCMODES_QCFG_RESP_FLAGS_HDS_ROCE		    0x20UL
	#define VNIC_PLCMODES_QCFG_RESP_FLAGS_DFLT_VNIC	    0x40UL
	uint16_t jumbo_thresh;
	uint16_t hds_offset;
	uint16_t hds_threshold;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t unused_4;
	uint8_t valid;
};

/* hwrm_vnic_rss_cos_lb_ctx_alloc */
/* Input (16 bytes) */
struct hwrm_vnic_rss_cos_lb_ctx_alloc_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
};

/* Output (16 bytes) */
struct hwrm_vnic_rss_cos_lb_ctx_alloc_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t rss_cos_lb_ctx_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t unused_4;
	uint8_t valid;
};

/* hwrm_vnic_rss_cos_lb_ctx_free */
/* Input (24 bytes) */
struct hwrm_vnic_rss_cos_lb_ctx_free_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t rss_cos_lb_ctx_id;
	uint16_t unused_0[3];
};

/* Output (16 bytes) */
struct hwrm_vnic_rss_cos_lb_ctx_free_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_ring_alloc */
/* Input (80 bytes) */
struct hwrm_ring_alloc_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t enables;
	#define RING_ALLOC_REQ_ENABLES_RESERVED1		    0x1UL
	#define RING_ALLOC_REQ_ENABLES_RESERVED2		    0x2UL
	#define RING_ALLOC_REQ_ENABLES_RESERVED3		    0x4UL
	#define RING_ALLOC_REQ_ENABLES_STAT_CTX_ID_VALID	    0x8UL
	#define RING_ALLOC_REQ_ENABLES_RESERVED4		    0x10UL
	#define RING_ALLOC_REQ_ENABLES_MAX_BW_VALID		    0x20UL
	uint8_t ring_type;
	#define RING_ALLOC_REQ_RING_TYPE_CMPL			   (0x0UL << 0)
	#define RING_ALLOC_REQ_RING_TYPE_TX			   (0x1UL << 0)
	#define RING_ALLOC_REQ_RING_TYPE_RX			   (0x2UL << 0)
	uint8_t unused_0;
	uint16_t unused_1;
	uint64_t page_tbl_addr;
	uint32_t fbo;
	uint8_t page_size;
	uint8_t page_tbl_depth;
	uint8_t unused_2;
	uint8_t unused_3;
	uint32_t length;
	uint16_t logical_id;
	uint16_t cmpl_ring_id;
	uint16_t queue_id;
	uint8_t unused_4;
	uint8_t unused_5;
	uint32_t reserved1;
	uint16_t reserved2;
	uint8_t unused_6;
	uint8_t unused_7;
	uint32_t reserved3;
	uint32_t stat_ctx_id;
	uint32_t reserved4;
	uint32_t max_bw;
	uint8_t int_mode;
	#define RING_ALLOC_REQ_INT_MODE_LEGACY			   (0x0UL << 0)
	#define RING_ALLOC_REQ_INT_MODE_RSVD			   (0x1UL << 0)
	#define RING_ALLOC_REQ_INT_MODE_MSIX			   (0x2UL << 0)
	#define RING_ALLOC_REQ_INT_MODE_POLL			   (0x3UL << 0)
	uint8_t unused_8[3];
};

/* Output (16 bytes) */
struct hwrm_ring_alloc_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t ring_id;
	uint16_t logical_ring_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_ring_free */
/* Input (24 bytes) */
struct hwrm_ring_free_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint8_t ring_type;
	#define RING_FREE_REQ_RING_TYPE_CMPL			   (0x0UL << 0)
	#define RING_FREE_REQ_RING_TYPE_TX			   (0x1UL << 0)
	#define RING_FREE_REQ_RING_TYPE_RX			   (0x2UL << 0)
	uint8_t unused_0;
	uint16_t ring_id;
	uint32_t unused_1;
};

/* Output (16 bytes) */
struct hwrm_ring_free_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_ring_cmpl_ring_qaggint_params */
/* Input (24 bytes) */
struct hwrm_ring_cmpl_ring_qaggint_params_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t ring_id;
	uint16_t unused_0[3];
};

/* Output (32 bytes) */
struct hwrm_ring_cmpl_ring_qaggint_params_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t flags;
	#define RING_CMPL_RING_QAGGINT_PARAMS_RESP_FLAGS_TIMER_RESET 0x1UL
	#define RING_CMPL_RING_QAGGINT_PARAMS_RESP_FLAGS_RING_IDLE 0x2UL
	uint16_t num_cmpl_dma_aggr;
	uint16_t num_cmpl_dma_aggr_during_int;
	uint16_t cmpl_aggr_dma_tmr;
	uint16_t cmpl_aggr_dma_tmr_during_int;
	uint16_t int_lat_tmr_min;
	uint16_t int_lat_tmr_max;
	uint16_t num_cmpl_aggr_int;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_ring_cmpl_ring_cfg_aggint_params */
/* Input (40 bytes) */
struct hwrm_ring_cmpl_ring_cfg_aggint_params_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t ring_id;
	uint16_t flags;
	#define RING_CMPL_RING_CFG_AGGINT_PARAMS_REQ_FLAGS_TIMER_RESET 0x1UL
	#define RING_CMPL_RING_CFG_AGGINT_PARAMS_REQ_FLAGS_RING_IDLE 0x2UL
	uint16_t num_cmpl_dma_aggr;
	uint16_t num_cmpl_dma_aggr_during_int;
	uint16_t cmpl_aggr_dma_tmr;
	uint16_t cmpl_aggr_dma_tmr_during_int;
	uint16_t int_lat_tmr_min;
	uint16_t int_lat_tmr_max;
	uint16_t num_cmpl_aggr_int;
	uint16_t unused_0[3];
};

/* Output (16 bytes) */
struct hwrm_ring_cmpl_ring_cfg_aggint_params_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_ring_reset */
/* Input (24 bytes) */
struct hwrm_ring_reset_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint8_t ring_type;
	#define RING_RESET_REQ_RING_TYPE_CMPL			   (0x0UL << 0)
	#define RING_RESET_REQ_RING_TYPE_TX			   (0x1UL << 0)
	#define RING_RESET_REQ_RING_TYPE_RX			   (0x2UL << 0)
	uint8_t unused_0;
	uint16_t ring_id;
	uint32_t unused_1;
};

/* Output (16 bytes) */
struct hwrm_ring_reset_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_ring_grp_alloc */
/* Input (24 bytes) */
struct hwrm_ring_grp_alloc_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t cr;
	uint16_t rr;
	uint16_t ar;
	uint16_t sc;
};

/* Output (16 bytes) */
struct hwrm_ring_grp_alloc_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t ring_group_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_ring_grp_free */
/* Input (24 bytes) */
struct hwrm_ring_grp_free_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t ring_group_id;
	uint32_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_ring_grp_free_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_cfa_l2_filter_alloc */
/* Input (96 bytes) */
struct hwrm_cfa_l2_filter_alloc_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define CFA_L2_FILTER_ALLOC_REQ_FLAGS_PATH		    0x1UL
	#define CFA_L2_FILTER_ALLOC_REQ_FLAGS_PATH_TX		   (0x0UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_FLAGS_PATH_RX		   (0x1UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_FLAGS_PATH_LAST    CFA_L2_FILTER_ALLOC_REQ_FLAGS_PATH_RX
	#define CFA_L2_FILTER_ALLOC_REQ_FLAGS_LOOPBACK		    0x2UL
	#define CFA_L2_FILTER_ALLOC_REQ_FLAGS_DROP		    0x4UL
	#define CFA_L2_FILTER_ALLOC_REQ_FLAGS_OUTERMOST	    0x8UL
	uint32_t enables;
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_L2_ADDR	    0x1UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_L2_ADDR_MASK       0x2UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_L2_OVLAN	    0x4UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_L2_OVLAN_MASK      0x8UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_L2_IVLAN	    0x10UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_L2_IVLAN_MASK      0x20UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_T_L2_ADDR	    0x40UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_T_L2_ADDR_MASK     0x80UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_T_L2_OVLAN	    0x100UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_T_L2_OVLAN_MASK    0x200UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_T_L2_IVLAN	    0x400UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_T_L2_IVLAN_MASK    0x800UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_SRC_TYPE	    0x1000UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_SRC_ID		    0x2000UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_TUNNEL_TYPE	    0x4000UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_DST_ID		    0x8000UL
	#define CFA_L2_FILTER_ALLOC_REQ_ENABLES_MIRROR_VNIC_ID     0x10000UL
	uint8_t l2_addr[6];
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t l2_addr_mask[6];
	uint16_t l2_ovlan;
	uint16_t l2_ovlan_mask;
	uint16_t l2_ivlan;
	uint16_t l2_ivlan_mask;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t t_l2_addr[6];
	uint8_t unused_4;
	uint8_t unused_5;
	uint8_t t_l2_addr_mask[6];
	uint16_t t_l2_ovlan;
	uint16_t t_l2_ovlan_mask;
	uint16_t t_l2_ivlan;
	uint16_t t_l2_ivlan_mask;
	uint8_t src_type;
	#define CFA_L2_FILTER_ALLOC_REQ_SRC_TYPE_NPORT		   (0x0UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_SRC_TYPE_PF		   (0x1UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_SRC_TYPE_VF		   (0x2UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_SRC_TYPE_VNIC		   (0x3UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_SRC_TYPE_KONG		   (0x4UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_SRC_TYPE_APE		   (0x5UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_SRC_TYPE_BONO		   (0x6UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_SRC_TYPE_TANG		   (0x7UL << 0)
	uint8_t unused_6;
	uint32_t src_id;
	uint8_t tunnel_type;
	#define CFA_L2_FILTER_ALLOC_REQ_TUNNEL_TYPE_NONTUNNEL     (0x0UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_TUNNEL_TYPE_VXLAN	   (0x1UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_TUNNEL_TYPE_NVGRE	   (0x2UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_TUNNEL_TYPE_L2GRE	   (0x3UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_TUNNEL_TYPE_IPIP	   (0x4UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_TUNNEL_TYPE_GENEVE	   (0x5UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_TUNNEL_TYPE_MPLS	   (0x6UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_TUNNEL_TYPE_STT	   (0x7UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_TUNNEL_TYPE_IPGRE	   (0x8UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_TUNNEL_TYPE_ANYTUNNEL     (0xffUL << 0)
	uint8_t unused_7;
	uint16_t dst_id;
	uint16_t mirror_vnic_id;
	uint8_t pri_hint;
	#define CFA_L2_FILTER_ALLOC_REQ_PRI_HINT_NO_PREFER	   (0x0UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_PRI_HINT_ABOVE_FILTER     (0x1UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_PRI_HINT_BELOW_FILTER     (0x2UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_PRI_HINT_MAX		   (0x3UL << 0)
	#define CFA_L2_FILTER_ALLOC_REQ_PRI_HINT_MIN		   (0x4UL << 0)
	uint8_t unused_8;
	uint32_t unused_9;
	uint64_t l2_filter_id_hint;
};

/* Output (24 bytes) */
struct hwrm_cfa_l2_filter_alloc_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint64_t l2_filter_id;
	uint32_t flow_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_cfa_l2_filter_free */
/* Input (24 bytes) */
struct hwrm_cfa_l2_filter_free_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint64_t l2_filter_id;
};

/* Output (16 bytes) */
struct hwrm_cfa_l2_filter_free_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_cfa_l2_filter_cfg */
/* Input (40 bytes) */
struct hwrm_cfa_l2_filter_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define CFA_L2_FILTER_CFG_REQ_FLAGS_PATH		    0x1UL
	#define CFA_L2_FILTER_CFG_REQ_FLAGS_PATH_TX		   (0x0UL << 0)
	#define CFA_L2_FILTER_CFG_REQ_FLAGS_PATH_RX		   (0x1UL << 0)
	#define CFA_L2_FILTER_CFG_REQ_FLAGS_PATH_LAST    CFA_L2_FILTER_CFG_REQ_FLAGS_PATH_RX
	#define CFA_L2_FILTER_CFG_REQ_FLAGS_DROP		    0x2UL
	uint32_t enables;
	#define CFA_L2_FILTER_CFG_REQ_ENABLES_DST_ID		    0x1UL
	#define CFA_L2_FILTER_CFG_REQ_ENABLES_NEW_MIRROR_VNIC_ID   0x2UL
	uint64_t l2_filter_id;
	uint32_t dst_id;
	uint32_t new_mirror_vnic_id;
};

/* Output (16 bytes) */
struct hwrm_cfa_l2_filter_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_cfa_l2_set_rx_mask */
/* Input (40 bytes) */
struct hwrm_cfa_l2_set_rx_mask_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t vnic_id;
	uint32_t mask;
	#define CFA_L2_SET_RX_MASK_REQ_MASK_RESERVED		    0x1UL
	#define CFA_L2_SET_RX_MASK_REQ_MASK_MCAST		    0x2UL
	#define CFA_L2_SET_RX_MASK_REQ_MASK_ALL_MCAST		    0x4UL
	#define CFA_L2_SET_RX_MASK_REQ_MASK_BCAST		    0x8UL
	#define CFA_L2_SET_RX_MASK_REQ_MASK_PROMISCUOUS	    0x10UL
	#define CFA_L2_SET_RX_MASK_REQ_MASK_OUTERMOST		    0x20UL
	uint64_t mc_tbl_addr;
	uint32_t num_mc_entries;
	uint32_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_cfa_l2_set_rx_mask_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_cfa_tunnel_filter_alloc */
/* Input (88 bytes) */
struct hwrm_cfa_tunnel_filter_alloc_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_FLAGS_LOOPBACK	    0x1UL
	uint32_t enables;
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_ENABLES_L2_FILTER_ID   0x1UL
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_ENABLES_L2_ADDR	    0x2UL
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_ENABLES_L2_IVLAN       0x4UL
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_ENABLES_L3_ADDR	    0x8UL
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_ENABLES_L3_ADDR_TYPE   0x10UL
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_ENABLES_T_L3_ADDR_TYPE 0x20UL
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_ENABLES_T_L3_ADDR      0x40UL
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_ENABLES_TUNNEL_TYPE    0x80UL
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_ENABLES_VNI	    0x100UL
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_ENABLES_DST_VNIC_ID    0x200UL
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_ENABLES_MIRROR_VNIC_ID 0x400UL
	uint64_t l2_filter_id;
	uint8_t l2_addr[6];
	uint16_t l2_ivlan;
	uint32_t l3_addr[4];
	uint32_t t_l3_addr[4];
	uint8_t l3_addr_type;
	uint8_t t_l3_addr_type;
	uint8_t tunnel_type;
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_TUNNEL_TYPE_NONTUNNEL (0x0UL << 0)
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_TUNNEL_TYPE_VXLAN     (0x1UL << 0)
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_TUNNEL_TYPE_NVGRE     (0x2UL << 0)
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_TUNNEL_TYPE_L2GRE     (0x3UL << 0)
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_TUNNEL_TYPE_IPIP      (0x4UL << 0)
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_TUNNEL_TYPE_GENEVE    (0x5UL << 0)
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_TUNNEL_TYPE_MPLS      (0x6UL << 0)
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_TUNNEL_TYPE_STT       (0x7UL << 0)
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_TUNNEL_TYPE_IPGRE     (0x8UL << 0)
	#define CFA_TUNNEL_FILTER_ALLOC_REQ_TUNNEL_TYPE_ANYTUNNEL (0xffUL << 0)
	uint8_t unused_0;
	uint32_t vni;
	uint32_t dst_vnic_id;
	uint32_t mirror_vnic_id;
};

/* Output (24 bytes) */
struct hwrm_cfa_tunnel_filter_alloc_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint64_t tunnel_filter_id;
	uint32_t flow_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_cfa_tunnel_filter_free */
/* Input (24 bytes) */
struct hwrm_cfa_tunnel_filter_free_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint64_t tunnel_filter_id;
};

/* Output (16 bytes) */
struct hwrm_cfa_tunnel_filter_free_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_cfa_encap_record_alloc */
/* Input (32 bytes) */
struct hwrm_cfa_encap_record_alloc_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define CFA_ENCAP_RECORD_ALLOC_REQ_FLAGS_LOOPBACK	    0x1UL
	uint8_t encap_type;
	#define CFA_ENCAP_RECORD_ALLOC_REQ_ENCAP_TYPE_VXLAN       (0x1UL << 0)
	#define CFA_ENCAP_RECORD_ALLOC_REQ_ENCAP_TYPE_NVGRE       (0x2UL << 0)
	#define CFA_ENCAP_RECORD_ALLOC_REQ_ENCAP_TYPE_L2GRE       (0x3UL << 0)
	#define CFA_ENCAP_RECORD_ALLOC_REQ_ENCAP_TYPE_IPIP	   (0x4UL << 0)
	#define CFA_ENCAP_RECORD_ALLOC_REQ_ENCAP_TYPE_GENEVE      (0x5UL << 0)
	#define CFA_ENCAP_RECORD_ALLOC_REQ_ENCAP_TYPE_MPLS	   (0x6UL << 0)
	#define CFA_ENCAP_RECORD_ALLOC_REQ_ENCAP_TYPE_VLAN	   (0x7UL << 0)
	#define CFA_ENCAP_RECORD_ALLOC_REQ_ENCAP_TYPE_IPGRE       (0x8UL << 0)
	uint8_t unused_0;
	uint16_t unused_1;
	uint32_t encap_data[16];
};

/* Output (16 bytes) */
struct hwrm_cfa_encap_record_alloc_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t encap_record_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_cfa_encap_record_free */
/* Input (24 bytes) */
struct hwrm_cfa_encap_record_free_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t encap_record_id;
	uint32_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_cfa_encap_record_free_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_cfa_ntuple_filter_alloc */
/* Input (128 bytes) */
struct hwrm_cfa_ntuple_filter_alloc_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_FLAGS_LOOPBACK	    0x1UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_FLAGS_DROP		    0x2UL
	uint32_t enables;
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_L2_FILTER_ID   0x1UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_ETHERTYPE      0x2UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_TUNNEL_TYPE    0x4UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_SRC_MACADDR    0x8UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_IPADDR_TYPE    0x10UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_SRC_IPADDR     0x20UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_SRC_IPADDR_MASK 0x40UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_DST_IPADDR     0x80UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_DST_IPADDR_MASK 0x100UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_IP_PROTOCOL    0x200UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_SRC_PORT       0x400UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_SRC_PORT_MASK  0x800UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_DST_PORT       0x1000UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_DST_PORT_MASK  0x2000UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_PRI_HINT       0x4000UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_NTUPLE_FILTER_ID 0x8000UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_DST_ID	    0x10000UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_MIRROR_VNIC_ID 0x20000UL
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_ENABLES_DST_MACADDR    0x40000UL
	uint64_t l2_filter_id;
	uint8_t src_macaddr[6];
	uint16_t ethertype;
	uint8_t ip_addr_type;
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_IP_ADDR_TYPE_UNKNOWN  (0x0UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_IP_ADDR_TYPE_IPV4     (0x4UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_IP_ADDR_TYPE_IPV6     (0x6UL << 0)
	uint8_t ip_protocol;
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_IP_PROTOCOL_UNKNOWN   (0x0UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_IP_PROTOCOL_UDP       (0x6UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_IP_PROTOCOL_TCP       (0x11UL << 0)
	uint16_t dst_id;
	uint16_t mirror_vnic_id;
	uint8_t tunnel_type;
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_TUNNEL_TYPE_NONTUNNEL (0x0UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_TUNNEL_TYPE_VXLAN     (0x1UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_TUNNEL_TYPE_NVGRE     (0x2UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_TUNNEL_TYPE_L2GRE     (0x3UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_TUNNEL_TYPE_IPIP      (0x4UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_TUNNEL_TYPE_GENEVE    (0x5UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_TUNNEL_TYPE_MPLS      (0x6UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_TUNNEL_TYPE_STT       (0x7UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_TUNNEL_TYPE_IPGRE     (0x8UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_TUNNEL_TYPE_ANYTUNNEL (0xffUL << 0)
	uint8_t pri_hint;
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_PRI_HINT_NO_PREFER    (0x0UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_PRI_HINT_ABOVE	   (0x1UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_PRI_HINT_BELOW	   (0x2UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_PRI_HINT_HIGHEST      (0x3UL << 0)
	#define CFA_NTUPLE_FILTER_ALLOC_REQ_PRI_HINT_LOWEST       (0x4UL << 0)
	uint32_t src_ipaddr[4];
	uint32_t src_ipaddr_mask[4];
	uint32_t dst_ipaddr[4];
	uint32_t dst_ipaddr_mask[4];
	uint16_t src_port;
	uint16_t src_port_mask;
	uint16_t dst_port;
	uint16_t dst_port_mask;
	uint64_t ntuple_filter_id_hint;
};

/* Output (24 bytes) */
struct hwrm_cfa_ntuple_filter_alloc_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint64_t ntuple_filter_id;
	uint32_t flow_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_cfa_ntuple_filter_free */
/* Input (24 bytes) */
struct hwrm_cfa_ntuple_filter_free_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint64_t ntuple_filter_id;
};

/* Output (16 bytes) */
struct hwrm_cfa_ntuple_filter_free_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_cfa_ntuple_filter_cfg */
/* Input (40 bytes) */
struct hwrm_cfa_ntuple_filter_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t enables;
	#define CFA_NTUPLE_FILTER_CFG_REQ_ENABLES_NEW_DST_ID       0x1UL
	#define CFA_NTUPLE_FILTER_CFG_REQ_ENABLES_NEW_MIRROR_VNIC_ID 0x2UL
	uint32_t unused_0;
	uint64_t ntuple_filter_id;
	uint32_t new_dst_id;
	uint32_t new_mirror_vnic_id;
};

/* Output (16 bytes) */
struct hwrm_cfa_ntuple_filter_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_cfa_em_flow_alloc */
/* Input (112 bytes) */
struct hwrm_cfa_em_flow_alloc_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t flags;
	#define CFA_EM_FLOW_ALLOC_REQ_FLAGS_PATH		    0x1UL
	#define CFA_EM_FLOW_ALLOC_REQ_FLAGS_PATH_TX		   (0x0UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_FLAGS_PATH_RX		   (0x1UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_FLAGS_PATH_LAST    CFA_EM_FLOW_ALLOC_REQ_FLAGS_PATH_RX
	#define CFA_EM_FLOW_ALLOC_REQ_FLAGS_BYTE_CTR		    0x2UL
	#define CFA_EM_FLOW_ALLOC_REQ_FLAGS_PKT_CTR		    0x4UL
	#define CFA_EM_FLOW_ALLOC_REQ_FLAGS_DECAP		    0x8UL
	#define CFA_EM_FLOW_ALLOC_REQ_FLAGS_ENCAP		    0x10UL
	#define CFA_EM_FLOW_ALLOC_REQ_FLAGS_DROP		    0x20UL
	uint32_t enables;
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_L2_FILTER_ID	    0x1UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_TUNNEL_TYPE	    0x2UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_TUNNEL_ID	    0x4UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_SRC_MACADDR	    0x8UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_DST_MACADDR	    0x10UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_OVLAN_VID	    0x20UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_IVLAN_VID	    0x40UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_ETHERTYPE	    0x80UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_SRC_IPADDR	    0x100UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_DST_IPADDR	    0x200UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_IPADDR_TYPE	    0x400UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_IP_PROTOCOL	    0x800UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_SRC_PORT		    0x1000UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_DST_PORT		    0x2000UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_DST_ID		    0x4000UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_MIRROR_VNIC_ID       0x8000UL
	#define CFA_EM_FLOW_ALLOC_REQ_ENABLES_ENCAP_RECORD_ID      0x10000UL
	uint64_t l2_filter_id;
	uint8_t tunnel_type;
	#define CFA_EM_FLOW_ALLOC_REQ_TUNNEL_TYPE_NONTUNNEL       (0x0UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_TUNNEL_TYPE_VXLAN	   (0x1UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_TUNNEL_TYPE_NVGRE	   (0x2UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_TUNNEL_TYPE_L2GRE	   (0x3UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_TUNNEL_TYPE_IPIP		   (0x4UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_TUNNEL_TYPE_GENEVE	   (0x5UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_TUNNEL_TYPE_MPLS		   (0x6UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_TUNNEL_TYPE_STT		   (0x7UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_TUNNEL_TYPE_IPGRE	   (0x8UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_TUNNEL_TYPE_ANYTUNNEL       (0xffUL << 0)
	uint8_t unused_0;
	uint16_t unused_1;
	uint32_t tunnel_id;
	uint8_t src_macaddr[6];
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t dst_macaddr[6];
	uint16_t ovlan_vid;
	uint16_t ivlan_vid;
	uint16_t ethertype;
	uint8_t ip_addr_type;
	#define CFA_EM_FLOW_ALLOC_REQ_IP_ADDR_TYPE_UNKNOWN	   (0x0UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_IP_ADDR_TYPE_IPV4	   (0x4UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_IP_ADDR_TYPE_IPV6	   (0x6UL << 0)
	uint8_t ip_protocol;
	#define CFA_EM_FLOW_ALLOC_REQ_IP_PROTOCOL_UNKNOWN	   (0x0UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_IP_PROTOCOL_UDP		   (0x6UL << 0)
	#define CFA_EM_FLOW_ALLOC_REQ_IP_PROTOCOL_TCP		   (0x11UL << 0)
	uint8_t unused_4;
	uint8_t unused_5;
	uint32_t src_ipaddr[4];
	uint32_t dst_ipaddr[4];
	uint16_t src_port;
	uint16_t dst_port;
	uint16_t dst_id;
	uint16_t mirror_vnic_id;
	uint32_t encap_record_id;
	uint32_t unused_6;
};

/* Output (24 bytes) */
struct hwrm_cfa_em_flow_alloc_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint64_t em_filter_id;
	uint32_t flow_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_cfa_em_flow_free */
/* Input (24 bytes) */
struct hwrm_cfa_em_flow_free_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint64_t em_filter_id;
};

/* Output (16 bytes) */
struct hwrm_cfa_em_flow_free_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_cfa_em_flow_cfg */
/* Input (40 bytes) */
struct hwrm_cfa_em_flow_cfg_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t enables;
	#define CFA_EM_FLOW_CFG_REQ_ENABLES_NEW_DST_ID		    0x1UL
	#define CFA_EM_FLOW_CFG_REQ_ENABLES_NEW_MIRROR_VNIC_ID     0x2UL
	uint32_t unused_0;
	uint64_t em_filter_id;
	uint32_t new_dst_id;
	uint32_t new_mirror_vnic_id;
};

/* Output (16 bytes) */
struct hwrm_cfa_em_flow_cfg_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_tunnel_dst_port_query */
/* Input (24 bytes) */
struct hwrm_tunnel_dst_port_query_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint8_t tunnel_type;
	#define TUNNEL_DST_PORT_QUERY_REQ_TUNNEL_TYPE_VXLAN       (0x1UL << 0)
	#define TUNNEL_DST_PORT_QUERY_REQ_TUNNEL_TYPE_GENEVE      (0x5UL << 0)
	uint8_t unused_0[7];
};

/* Output (16 bytes) */
struct hwrm_tunnel_dst_port_query_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t tunnel_dst_port_id;
	uint16_t tunnel_dst_port_val;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_tunnel_dst_port_alloc */
/* Input (24 bytes) */
struct hwrm_tunnel_dst_port_alloc_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint8_t tunnel_type;
	#define TUNNEL_DST_PORT_ALLOC_REQ_TUNNEL_TYPE_VXLAN       (0x1UL << 0)
	#define TUNNEL_DST_PORT_ALLOC_REQ_TUNNEL_TYPE_GENEVE      (0x5UL << 0)
	uint8_t unused_0;
	uint16_t tunnel_dst_port_val;
	uint32_t unused_1;
};

/* Output (16 bytes) */
struct hwrm_tunnel_dst_port_alloc_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t tunnel_dst_port_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t unused_4;
	uint8_t valid;
};

/* hwrm_tunnel_dst_port_free */
/* Input (24 bytes) */
struct hwrm_tunnel_dst_port_free_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint8_t tunnel_type;
	#define TUNNEL_DST_PORT_FREE_REQ_TUNNEL_TYPE_VXLAN	   (0x1UL << 0)
	#define TUNNEL_DST_PORT_FREE_REQ_TUNNEL_TYPE_GENEVE       (0x5UL << 0)
	uint8_t unused_0;
	uint16_t tunnel_dst_port_id;
	uint32_t unused_1;
};

/* Output (16 bytes) */
struct hwrm_tunnel_dst_port_free_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_stat_ctx_alloc */
/* Input (32 bytes) */
struct hwrm_stat_ctx_alloc_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint64_t stats_dma_addr;
	uint32_t update_period_ms;
	uint32_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_stat_ctx_alloc_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t stat_ctx_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_stat_ctx_free */
/* Input (24 bytes) */
struct hwrm_stat_ctx_free_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t stat_ctx_id;
	uint32_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_stat_ctx_free_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t stat_ctx_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_stat_ctx_query */
/* Input (24 bytes) */
struct hwrm_stat_ctx_query_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t stat_ctx_id;
	uint32_t unused_0;
};

/* Output (176 bytes) */
struct hwrm_stat_ctx_query_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint64_t tx_ucast_pkts;
	uint64_t tx_mcast_pkts;
	uint64_t tx_bcast_pkts;
	uint64_t tx_err_pkts;
	uint64_t tx_drop_pkts;
	uint64_t tx_ucast_bytes;
	uint64_t tx_mcast_bytes;
	uint64_t tx_bcast_bytes;
	uint64_t rx_ucast_pkts;
	uint64_t rx_mcast_pkts;
	uint64_t rx_bcast_pkts;
	uint64_t rx_err_pkts;
	uint64_t rx_drop_pkts;
	uint64_t rx_ucast_bytes;
	uint64_t rx_mcast_bytes;
	uint64_t rx_bcast_bytes;
	uint64_t rx_agg_pkts;
	uint64_t rx_agg_bytes;
	uint64_t rx_agg_events;
	uint64_t rx_agg_aborts;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_stat_ctx_clr_stats */
/* Input (24 bytes) */
struct hwrm_stat_ctx_clr_stats_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t stat_ctx_id;
	uint32_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_stat_ctx_clr_stats_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_fw_reset */
/* Input (24 bytes) */
struct hwrm_fw_reset_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint8_t embedded_proc_type;
	#define FW_RESET_REQ_EMBEDDED_PROC_TYPE_BOOT		   (0x0UL << 0)
	#define FW_RESET_REQ_EMBEDDED_PROC_TYPE_MGMT		   (0x1UL << 0)
	#define FW_RESET_REQ_EMBEDDED_PROC_TYPE_NETCTRL	   (0x2UL << 0)
	#define FW_RESET_REQ_EMBEDDED_PROC_TYPE_ROCE		   (0x3UL << 0)
	#define FW_RESET_REQ_EMBEDDED_PROC_TYPE_RSVD		   (0x4UL << 0)
	uint8_t selfrst_status;
	#define FW_RESET_REQ_SELFRST_STATUS_SELFRSTNONE	   (0x0UL << 0)
	#define FW_RESET_REQ_SELFRST_STATUS_SELFRSTASAP	   (0x1UL << 0)
	#define FW_RESET_REQ_SELFRST_STATUS_SELFRSTPCIERST	   (0x2UL << 0)
	uint16_t unused_0[3];
};

/* Output (16 bytes) */
struct hwrm_fw_reset_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint8_t selfrst_status;
	#define FW_RESET_RESP_SELFRST_STATUS_SELFRSTNONE	   (0x0UL << 0)
	#define FW_RESET_RESP_SELFRST_STATUS_SELFRSTASAP	   (0x1UL << 0)
	#define FW_RESET_RESP_SELFRST_STATUS_SELFRSTPCIERST       (0x2UL << 0)
	uint8_t unused_0;
	uint16_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t unused_4;
	uint8_t valid;
};

/* hwrm_fw_qstatus */
/* Input (24 bytes) */
struct hwrm_fw_qstatus_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint8_t embedded_proc_type;
	#define FW_QSTATUS_REQ_EMBEDDED_PROC_TYPE_BOOT		   (0x0UL << 0)
	#define FW_QSTATUS_REQ_EMBEDDED_PROC_TYPE_MGMT		   (0x1UL << 0)
	#define FW_QSTATUS_REQ_EMBEDDED_PROC_TYPE_NETCTRL	   (0x2UL << 0)
	#define FW_QSTATUS_REQ_EMBEDDED_PROC_TYPE_ROCE		   (0x3UL << 0)
	#define FW_QSTATUS_REQ_EMBEDDED_PROC_TYPE_RSVD		   (0x4UL << 0)
	uint8_t unused_0[7];
};

/* Output (16 bytes) */
struct hwrm_fw_qstatus_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint8_t selfrst_status;
	#define FW_QSTATUS_RESP_SELFRST_STATUS_SELFRSTNONE	   (0x0UL << 0)
	#define FW_QSTATUS_RESP_SELFRST_STATUS_SELFRSTASAP	   (0x1UL << 0)
	#define FW_QSTATUS_RESP_SELFRST_STATUS_SELFRSTPCIERST     (0x2UL << 0)
	uint8_t unused_0;
	uint16_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t unused_4;
	uint8_t valid;
};

/* hwrm_exec_fwd_resp */
/* Input (128 bytes) */
struct hwrm_exec_fwd_resp_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t encap_request[26];
	uint16_t encap_resp_target_id;
	uint16_t unused_0[3];
};

/* Output (16 bytes) */
struct hwrm_exec_fwd_resp_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_reject_fwd_resp */
/* Input (128 bytes) */
struct hwrm_reject_fwd_resp_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t encap_request[26];
	uint16_t encap_resp_target_id;
	uint16_t unused_0[3];
};

/* Output (16 bytes) */
struct hwrm_reject_fwd_resp_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_fwd_resp */
/* Input (40 bytes) */
struct hwrm_fwd_resp_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t encap_resp_target_id;
	uint16_t encap_resp_cmpl_ring;
	uint16_t encap_resp_len;
	uint8_t unused_0;
	uint8_t unused_1;
	uint64_t encap_resp_addr;
	uint32_t encap_resp[24];
};

/* Output (16 bytes) */
struct hwrm_fwd_resp_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_fwd_async_event_cmpl */
/* Input (32 bytes) */
struct hwrm_fwd_async_event_cmpl_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t encap_async_event_target_id;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2[3];
	uint8_t unused_3;
	uint32_t encap_async_event_cmpl[4];
};

/* Output (16 bytes) */
struct hwrm_fwd_async_event_cmpl_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_temp_monitor_query */
/* Input (16 bytes) */
struct hwrm_temp_monitor_query_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
};

/* Output (16 bytes) */
struct hwrm_temp_monitor_query_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint8_t temp;
	uint8_t unused_0;
	uint16_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t unused_4;
	uint8_t valid;
};

/* hwrm_dbg_dump */
/* Input (40 bytes) */
struct hwrm_dbg_dump_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t handle;
	uint32_t unused_0;
	uint64_t host_dbg_dump_addr;
	uint64_t host_dbg_dump_addr_len;
};

/* Output (24 bytes) */
struct hwrm_dbg_dump_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t nexthandle;
	uint32_t dbg_data_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_nvm_raw_write_blk */
/* Input (32 bytes) */
struct hwrm_nvm_raw_write_blk_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint64_t host_src_addr;
	uint32_t dest_addr;
	uint32_t len;
};

/* Output (16 bytes) */
struct hwrm_nvm_raw_write_blk_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_nvm_read */
/* Input (40 bytes) */
struct hwrm_nvm_read_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint64_t host_dest_addr;
	uint16_t dir_idx;
	uint8_t unused_0;
	uint8_t unused_1;
	uint32_t offset;
	uint32_t len;
	uint32_t unused_2;
};

/* Output (16 bytes) */
struct hwrm_nvm_read_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_nvm_raw_dump */
/* Input (32 bytes) */
struct hwrm_nvm_raw_dump_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint64_t host_dest_addr;
	uint32_t offset;
	uint32_t len;
};

/* Output (16 bytes) */
struct hwrm_nvm_raw_dump_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_nvm_get_dir_entries */
/* Input (24 bytes) */
struct hwrm_nvm_get_dir_entries_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint64_t host_dest_addr;
};

/* Output (16 bytes) */
struct hwrm_nvm_get_dir_entries_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_nvm_get_dir_info */
/* Input (16 bytes) */
struct hwrm_nvm_get_dir_info_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
};

/* Output (24 bytes) */
struct hwrm_nvm_get_dir_info_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t entries;
	uint32_t entry_length;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_nvm_write */
/* Input (48 bytes) */
struct hwrm_nvm_write_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint64_t host_src_addr;
	uint16_t dir_type;
	uint16_t dir_ordinal;
	uint16_t dir_ext;
	uint16_t dir_attr;
	uint32_t dir_data_length;
	uint16_t option;
	uint16_t flags;
	#define NVM_WRITE_REQ_FLAGS_KEEP_ORIG_ACTIVE_IMG	    0x1UL
	uint32_t dir_item_length;
	uint32_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_nvm_write_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t dir_item_length;
	uint16_t dir_idx;
	uint8_t unused_0;
	uint8_t valid;
};

/* hwrm_nvm_modify */
/* Input (40 bytes) */
struct hwrm_nvm_modify_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint64_t host_src_addr;
	uint16_t dir_idx;
	uint8_t unused_0;
	uint8_t unused_1;
	uint32_t offset;
	uint32_t len;
	uint32_t unused_2;
};

/* Output (16 bytes) */
struct hwrm_nvm_modify_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_nvm_find_dir_entry */
/* Input (32 bytes) */
struct hwrm_nvm_find_dir_entry_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t enables;
	#define NVM_FIND_DIR_ENTRY_REQ_ENABLES_DIR_IDX_VALID       0x1UL
	uint16_t dir_idx;
	uint16_t dir_type;
	uint16_t dir_ordinal;
	uint16_t dir_ext;
	uint8_t opt_ordinal;
	#define NVM_FIND_DIR_ENTRY_REQ_OPT_ORDINAL_MASK	    0x3UL
	#define NVM_FIND_DIR_ENTRY_REQ_OPT_ORDINAL_SFT		    0
	#define NVM_FIND_DIR_ENTRY_REQ_OPT_ORDINAL_EQ		   (0x0UL << 0)
	#define NVM_FIND_DIR_ENTRY_REQ_OPT_ORDINAL_GE		   (0x1UL << 0)
	#define NVM_FIND_DIR_ENTRY_REQ_OPT_ORDINAL_GT		   (0x2UL << 0)
	uint8_t unused_1[3];
};

/* Output (32 bytes) */
struct hwrm_nvm_find_dir_entry_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t dir_item_length;
	uint32_t dir_data_length;
	uint32_t fw_ver;
	uint16_t dir_ordinal;
	uint16_t dir_idx;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_nvm_erase_dir_entry */
/* Input (24 bytes) */
struct hwrm_nvm_erase_dir_entry_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t dir_idx;
	uint16_t unused_0[3];
};

/* Output (16 bytes) */
struct hwrm_nvm_erase_dir_entry_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_nvm_get_dev_info */
/* Input (16 bytes) */
struct hwrm_nvm_get_dev_info_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
};

/* Output (32 bytes) */
struct hwrm_nvm_get_dev_info_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint16_t manufacturer_id;
	uint16_t device_id;
	uint32_t sector_size;
	uint32_t nvram_size;
	uint32_t reserved_size;
	uint32_t available_size;
	uint8_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t valid;
};

/* hwrm_nvm_mod_dir_entry */
/* Input (32 bytes) */
struct hwrm_nvm_mod_dir_entry_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint32_t enables;
	#define NVM_MOD_DIR_ENTRY_REQ_ENABLES_CHECKSUM		    0x1UL
	uint16_t dir_idx;
	uint16_t dir_ordinal;
	uint16_t dir_ext;
	uint16_t dir_attr;
	uint32_t checksum;
};

/* Output (16 bytes) */
struct hwrm_nvm_mod_dir_entry_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

/* hwrm_nvm_verify_update */
/* Input (24 bytes) */
struct hwrm_nvm_verify_update_input {
	uint16_t req_type;
	uint16_t cmpl_ring;
	uint16_t seq_id;
	uint16_t target_id;
	uint64_t resp_addr;
	uint16_t dir_type;
	uint16_t dir_ordinal;
	uint16_t dir_ext;
	uint16_t unused_0;
};

/* Output (16 bytes) */
struct hwrm_nvm_verify_update_output {
	uint16_t error_code;
	uint16_t req_type;
	uint16_t seq_id;
	uint16_t resp_len;
	uint32_t unused_0;
	uint8_t unused_1;
	uint8_t unused_2;
	uint8_t unused_3;
	uint8_t valid;
};

#endif /* _HSI_STRUCT_DEF_LINUX_EXTERNAL_H_ */
